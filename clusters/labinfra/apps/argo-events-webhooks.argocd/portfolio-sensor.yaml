---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: portfolio-ci-sensor
  namespace: argocd
  labels:
    app.kubernetes.io/name: argo-events-webhooks
    app.kubernetes.io/component: sensor
spec:
  serviceAccountName: webhook-sensor

  # Dependencies - events that this sensor listens to
  dependencies:
  - name: portfolio-webhook-dep
    eventSourceName: portfolio-git-webhook
    eventName: portfolio-repo

  - name: generic-webhook-dep
    eventSourceName: portfolio-git-webhook
    eventName: git-push

  # Triggers - actions to take when dependencies are satisfied
  triggers:

  # Trigger for portfolio-specific builds
  - template:
      name: portfolio-build-trigger
      argoWorkflow:
        group: argoproj.io
        version: v1alpha1
        resource: workflows
        operation: create
        source:
          resource:
            apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            metadata:
              generateName: portfolio-webhook-build-
              namespace: argocd
              labels:
                trigger: webhook
                repository: portfolio
            spec:
              serviceAccountName: workflow-builder
              entrypoint: webhook-triggered-build

              arguments:
                parameters:
                - name: repo-url
                  value: "https://github.com/xuperson-org/labinfra"
                - name: revision
                  # Extract commit SHA from webhook payload
                  value: "{{dependencies.portfolio-webhook-dep.body.after | default('HEAD')}}"
                - name: image-tag
                  value: "webhook-{{workflow.creationTimestamp.Y}}{{workflow.creationTimestamp.m}}{{workflow.creationTimestamp.d}}-{{workflow.creationTimestamp.H}}{{workflow.creationTimestamp.M}}"
                - name: trigger-event
                  value: "Git push to {{dependencies.portfolio-webhook-dep.body.ref | default('unknown branch')}}"
                - name: commit-message
                  value: "{{dependencies.portfolio-webhook-dep.body.head_commit.message | default('No commit message')}}"
                - name: author
                  value: "{{dependencies.portfolio-webhook-dep.body.head_commit.author.name | default('Unknown')}}"

              templates:

              # Webhook-triggered build pipeline
              - name: webhook-triggered-build
                dag:
                  tasks:
                  - name: log-webhook-info
                    template: log-webhook-trigger

                  - name: build-pipeline
                    templateRef:
                      name: portfolio-build-pipeline
                      template: build-and-push
                    arguments:
                      parameters:
                      - name: repo-url
                        value: "{{workflow.parameters.repo-url}}"
                      - name: revision
                        value: "{{workflow.parameters.revision}}"
                      - name: image-tag
                        value: "{{workflow.parameters.image-tag}}"
                    dependencies: [log-webhook-info]

                  - name: deploy-pipeline
                    templateRef:
                      name: portfolio-deploy-pipeline
                      template: deploy-application
                    arguments:
                      parameters:
                      - name: application-name
                        value: "avada-portfolio"
                      - name: target-revision
                        value: "{{workflow.parameters.revision}}"
                    dependencies: [build-pipeline]

              # Log webhook trigger information
              - name: log-webhook-trigger
                container:
                  image: alpine:latest
                  command: [sh, -c]
                  args:
                  - |
                    echo "üîó Webhook CI/CD Pipeline Triggered"
                    echo "=================================================="
                    echo "üìÖ Timestamp: $(date)"
                    echo "üîß Trigger: {{workflow.parameters.trigger-event}}"
                    echo "üìù Commit: {{workflow.parameters.commit-message}}"
                    echo "üë§ Author: {{workflow.parameters.author}}"
                    echo "üéØ Revision: {{workflow.parameters.revision}}"
                    echo "üè∑Ô∏è Image Tag: {{workflow.parameters.image-tag}}"
                    echo "=================================================="
                    echo "üöÄ Starting automated build and deployment..."
                  securityContext:
                    runAsNonRoot: true
                    runAsUser: 1000

        parameters:
        - src:
            dependencyName: portfolio-webhook-dep
            dataKey: body.after
          dest: spec.arguments.parameters.0.value
        - src:
            dependencyName: portfolio-webhook-dep
            dataKey: body.ref
          dest: spec.arguments.parameters.3.value

  # Trigger for generic Git pushes to any supported repository
  - template:
      name: generic-build-trigger
      argoWorkflow:
        group: argoproj.io
        version: v1alpha1
        resource: workflows
        operation: create
        source:
          resource:
            apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            metadata:
              generateName: generic-webhook-build-
              namespace: argocd
              labels:
                trigger: webhook
                repository: generic
            spec:
              serviceAccountName: workflow-builder
              entrypoint: generic-webhook-build

              arguments:
                parameters:
                - name: repo-name
                  value: "{{dependencies.generic-webhook-dep.body.repository.full_name | default('unknown/repo')}}"
                - name: revision
                  value: "{{dependencies.generic-webhook-dep.body.after | default('HEAD')}}"
                - name: branch
                  value: "{{dependencies.generic-webhook-dep.body.ref | default('refs/heads/unknown')}}"

              templates:

              # Generic webhook handler
              - name: generic-webhook-build
                container:
                  image: alpine:latest
                  command: [sh, -c]
                  args:
                  - |
                    echo "üîó Generic Git Webhook Received"
                    echo "================================="
                    echo "üìÖ Timestamp: $(date)"
                    echo "üì¶ Repository: {{workflow.parameters.repo-name}}"
                    echo "üåø Branch: {{workflow.parameters.branch}}"
                    echo "üéØ Revision: {{workflow.parameters.revision}}"
                    echo "================================="

                    # Route to appropriate pipeline based on repository
                    REPO_NAME="{{workflow.parameters.repo-name}}"

                    if echo "$REPO_NAME" | grep -q "avada-portfolio"; then
                      echo "üéØ Routing to portfolio CI/CD pipeline"
                      # This could trigger the portfolio build
                    elif echo "$REPO_NAME" | grep -q "labinfra"; then
                      echo "üéØ Infrastructure repository detected"
                      # This could trigger infrastructure validation
                    else
                      echo "‚ÑπÔ∏è No specific pipeline configured for this repository"
                    fi

                    echo "‚úÖ Generic webhook processed"
                  securityContext:
                    runAsNonRoot: true
                    runAsUser: 1000

        parameters:
        - src:
            dependencyName: generic-webhook-dep
            dataKey: body.repository.full_name
          dest: spec.arguments.parameters.0.value
        - src:
            dependencyName: generic-webhook-dep
            dataKey: body.after
          dest: spec.arguments.parameters.1.value
        - src:
            dependencyName: generic-webhook-dep
            dataKey: body.ref
          dest: spec.arguments.parameters.2.value

  # Error handling
  errorOnFailedRound: true
  eventBusName: default