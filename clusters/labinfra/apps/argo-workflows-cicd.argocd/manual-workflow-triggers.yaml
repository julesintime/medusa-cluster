---
# Manual workflow trigger via Kubernetes manifest (CLI-free)
# Note: This is a template - copy and use kubectl create for actual triggers
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: manual-portfolio-deploy-trigger
  namespace: argocd
  labels:
    app.kubernetes.io/name: argo-workflows-cicd
    app.kubernetes.io/component: manual-trigger
    trigger: manual
    target: avada-portfolio
spec:
  serviceAccountName: workflow-builder
  entrypoint: manual-deploy-pipeline

  arguments:
    parameters:
    - name: repo-url
      value: "https://github.com/xuperson-org/labinfra"
    - name: revision
      value: "HEAD"
    - name: image-tag
      value: "manual-deploy-v1.0"
    - name: trigger-reason
      value: "Initial manual deployment via Kubernetes manifest"

  templates:

  # Manual deployment pipeline
  - name: manual-deploy-pipeline
    dag:
      tasks:
      - name: log-deployment-start
        template: log-trigger-info

      - name: build-images
        templateRef:
          name: portfolio-build-pipeline
          template: build-and-push
        arguments:
          parameters:
          - name: repo-url
            value: "{{workflow.parameters.repo-url}}"
          - name: revision
            value: "{{workflow.parameters.revision}}"
          - name: image-tag
            value: "{{workflow.parameters.image-tag}}"
        dependencies: [log-deployment-start]

      - name: deploy-application
        templateRef:
          name: portfolio-deploy-pipeline
          template: deploy-application
        arguments:
          parameters:
          - name: application-name
            value: "avada-portfolio"
          - name: target-revision
            value: "{{workflow.parameters.revision}}"
        dependencies: [build-images]

      - name: final-verification
        template: final-health-check
        dependencies: [deploy-application]

  # Log trigger information
  - name: log-trigger-info
    container:
      image: alpine:latest
      command: [sh, -c]
      args:
      - |
        echo "üöÄ Manual Portfolio Deployment Started"
        echo "========================================"
        echo "üìÖ Timestamp: $(date)"
        echo "üéØ Repository: {{workflow.parameters.repo-url}}"
        echo "üîñ Revision: {{workflow.parameters.revision}}"
        echo "üè∑Ô∏è Image Tag: {{workflow.parameters.image-tag}}"
        echo "üìù Reason: {{workflow.parameters.trigger-reason}}"
        echo "========================================"
        echo "üîß This workflow will:"
        echo "  1. Build custom WordPress images"
        echo "  2. Update deployment manifests"
        echo "  3. Trigger ArgoCD application sync"
        echo "  4. Run health checks"
        echo "========================================"
        echo "‚úÖ Manual deployment pipeline initiated"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000

  # Final verification
  - name: final-health-check
    container:
      image: alpine/curl:latest
      command: [sh, -c]
      args:
      - |
        echo "üîç Final Health Check for Avada Portfolio"
        echo "========================================"

        # Wait for application to be ready
        echo "‚è≥ Waiting for application to be ready..."
        sleep 30

        # Check WordPress health
        echo "üß™ Testing WordPress accessibility..."
        for i in $(seq 1 20); do
          echo "Attempt $i/20..."
          if curl -f -s --max-time 10 http://wordpress.avada-portfolio.svc.cluster.local/wp-admin/install.php > /dev/null; then
            echo "‚úÖ WordPress is responding internally"
            break
          else
            echo "‚è≥ WordPress not ready yet, waiting..."
            sleep 15
          fi
        done

        # Check MySQL connectivity
        echo "üß™ Testing MySQL connectivity..."
        if nc -z mysql.avada-portfolio.svc.cluster.local 3306; then
          echo "‚úÖ MySQL is accessible"
        else
          echo "‚ùå MySQL connection failed"
        fi

        echo "========================================"
        echo "üéâ Manual deployment pipeline completed!"
        echo "üìç Access your application at:"
        echo "   https://avada-portfolio.xuperson.org"
        echo "========================================"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000

---
# Simple test workflow template to verify Argo Workflows is working
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: test-argo-workflows-template
  namespace: argocd
  labels:
    app.kubernetes.io/name: argo-workflows-cicd
    app.kubernetes.io/component: test
spec:
  serviceAccountName: workflow-builder
  entrypoint: test-pipeline

  templates:
  - name: test-pipeline
    dag:
      tasks:
      - name: test-step-1
        template: hello-world
      - name: test-step-2
        template: cluster-info
        dependencies: [test-step-1]

  - name: hello-world
    container:
      image: alpine:latest
      command: [echo]
      args: ["üéâ Argo Workflows is working! Pipeline test successful."]

  - name: cluster-info
    container:
      image: alpine:latest
      command: [sh, -c]
      args:
      - |
        echo "üîç Cluster Information:"
        echo "Namespace: argocd"
        echo "Workflow: {{workflow.name}}"
        echo "Timestamp: $(date)"
        echo "‚úÖ Test pipeline completed successfully"