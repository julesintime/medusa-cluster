---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coder-template-init-script
  namespace: coder
  labels:
    app.kubernetes.io/name: coder-template-init-script
    app.kubernetes.io/component: template-automation
    app.kubernetes.io/managed-by: flux
data:
  template-init.sh: |
    #!/bin/sh
    set -e

    # Template automation script with FULLY AUTOMATIC admin user creation
    # Uses coder CLI for complete automation - NO MANUAL STEPS

    # Add shared binaries to PATH
    export PATH="/shared:$PATH"
    
    CODER_URL="https://coder.xuperson.org"
    TEMPLATE_NAME="kubernetes-devcontainer"
    VERSION_NAME="gitops-$(date +%Y%m%d-%H%M%S)"
    TOKEN_NAME="template-automation"

    echo "üèóÔ∏è Setting up Coder template automation..."
    echo "URL: $CODER_URL"
    echo "Template: $TEMPLATE_NAME" 
    echo "Version: $VERSION_NAME"
    
    # Verify binaries are available
    echo "üîß Verifying required binaries..."
    if ! command -v kubectl >/dev/null 2>&1; then
      echo "‚ùå kubectl not found in PATH"
      exit 1
    fi
    if ! command -v coder >/dev/null 2>&1; then
      echo "‚ùå coder CLI not found in PATH"
      exit 1
    fi
    echo "‚úÖ kubectl and coder CLI available"

    # Wait for Coder to be ready
    echo "üì° Waiting for Coder to be ready..."
    for i in $(seq 1 60); do
      if curl -s -f "$CODER_URL/healthz" >/dev/null 2>&1; then
        echo "‚úÖ Coder is ready!"
        break
      fi
      echo "   Attempt $i/60: Coder not ready, waiting..."
      sleep 10
    done

    if ! curl -s -f "$CODER_URL/healthz" >/dev/null 2>&1; then
      echo "‚ùå ERROR: Coder failed to become ready after 10 minutes"
      exit 1
    fi

    # FULLY AUTOMATIC admin user and token creation
    echo "üîë Creating admin user and token AUTOMATICALLY..."
    
    # Test kubectl access
    echo "   Testing kubectl access..."
    if ! kubectl get secrets -n coder >/dev/null 2>&1; then
      echo "   ‚ùå kubectl access failed"
      exit 1
    fi
    echo "   ‚úÖ kubectl access confirmed"

    # Check for existing k8s secret
    SECRET_EXISTS=false
    K8S_TOKEN=""
    echo "   Checking for existing k8s secret..."
    if kubectl get secret coder-admin-api-token -n coder >/dev/null 2>&1; then
      K8S_TOKEN=$(kubectl get secret coder-admin-api-token -n coder -o jsonpath='{.data.token}' | base64 -d 2>/dev/null || echo "")
      if [ -n "$K8S_TOKEN" ] && [ ${#K8S_TOKEN} -gt 20 ]; then
        SECRET_EXISTS=true
        echo "   ‚úÖ Found existing k8s secret with valid token"
      else
        echo "   ‚ùå Secret exists but token is invalid"
      fi
    else
      echo "   ‚ùå No k8s secret found"
    fi

    # Validate existing token if we have one
    TOKEN_VALID=false
    if [ "$SECRET_EXISTS" = true ]; then
      echo "   Validating existing token..."
      if curl -s -f -H "Coder-Session-Token: $K8S_TOKEN" "$CODER_URL/api/v2/users/me" >/dev/null 2>&1; then
        TOKEN_VALID=true
        echo "   ‚úÖ Existing token is valid and working"
        ADMIN_TOKEN="$K8S_TOKEN"
      else
        echo "   ‚ùå Existing token is invalid or expired"
      fi
    fi

    # Create admin user and token automatically if needed
    if [ "$TOKEN_VALID" = false ]; then
      echo "ü§ñ Creating admin user and token FULLY AUTOMATICALLY..."
      
      # Check if initial user already exists
      FIRST_USER_EXISTS=$(curl -s "$CODER_URL/api/v2/users/first" | grep -q "already been created" && echo "true" || echo "false")
      
      if [ "$FIRST_USER_EXISTS" = "true" ]; then
        echo "   ‚ö†Ô∏è  Initial user already exists - requires manual API token setup"
        echo ""
        echo "üîë MANUAL SETUP REQUIRED:"
        echo "   1. Open: $CODER_URL"
        echo "   2. Login with existing admin account"
        echo "   3. Go to Account Settings ‚Üí Tokens"
        echo "   4. Create new token named 'template-automation' with 8760h lifetime"
        echo "   5. Run this command to store the token:"
        echo "      kubectl create secret generic coder-admin-api-token \\"
        echo "        --from-literal=token='<YOUR_TOKEN_HERE>' -n coder"
        echo ""
        echo "   Then re-run this automation job."
        exit 1
      fi
      
      # Get database URL from secrets  
      DB_URL=$(kubectl get secret coder-database-secrets -n coder -o jsonpath='{.data.database-url}' | base64 -d)
      echo "   Using database: ${DB_URL%%@*}@***"
      
      # Generate new admin credentials for initial setup
      ADMIN_USERNAME="coder-admin"
      ADMIN_EMAIL="coder-admin@xuperson.org"
      ADMIN_PASSWORD=$(head -c 32 /dev/urandom | base64 | tr -d '+=/' | head -c 32)
      echo "   üîß Generated new admin credentials: $ADMIN_USERNAME"
      
      echo "   Creating admin user: $ADMIN_USERNAME ($ADMIN_EMAIL)"
      
      # Use coder server create-admin-user command to create initial admin
      echo "   Running: coder server create-admin-user..."
      export CODER_USERNAME="$ADMIN_USERNAME"
      export CODER_EMAIL="$ADMIN_EMAIL" 
      export CODER_PASSWORD="$ADMIN_PASSWORD"
      
      if coder server create-admin-user --postgres-url="$DB_URL" 2>/dev/null; then
        echo "   ‚úÖ Admin user created successfully"
      else
        echo "   ‚ùå Failed to create admin user"
        exit 1
      fi
      
      # Now login via REST API to get a session token
      echo "   Logging in via REST API..."
      LOGIN_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/users/login" \
        -H "Content-Type: application/json" \
        -d "{
          \"email\": \"$ADMIN_EMAIL\",
          \"password\": \"$ADMIN_PASSWORD\"
        }")
      
      SESSION_TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"session_token":"[^"]*"' | sed 's/"session_token":"//;s/"//')
      
      if [ -n "$SESSION_TOKEN" ] && [ ${#SESSION_TOKEN} -gt 20 ]; then
        echo "   ‚úÖ Login successful via REST API"
        
        # Create API token using REST API
        echo "   Creating API token via REST API..."
        TOKEN_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/tokens" \
          -H "Content-Type: application/json" \
          -H "Coder-Session-Token: $SESSION_TOKEN" \
          -d "{
            \"name\": \"$TOKEN_NAME\",
            \"lifetime\": \"8760h\"
          }")
        
        ADMIN_TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"key":"[^"]*"' | sed 's/"key":"//;s/"//')
        
        if [ -n "$ADMIN_TOKEN" ] && [ ${#ADMIN_TOKEN} -gt 20 ]; then
          echo "   ‚úÖ API token created via REST API (length: ${#ADMIN_TOKEN})"
          
          # Store admin credentials if they weren't already stored
          if [ "$CREDENTIALS_EXIST" = false ]; then
            echo "   üíæ Storing admin credentials for future use..."
            kubectl create secret generic coder-admin-credentials \
              --from-literal=username="$ADMIN_USERNAME" \
              --from-literal=email="$ADMIN_EMAIL" \
              --from-literal=password="$ADMIN_PASSWORD" \
              -n coder >/dev/null 2>&1
            
            if [ $? -eq 0 ]; then
              echo "   ‚úÖ Admin credentials stored successfully"
            else
              echo "   ‚ö†Ô∏è  Failed to store admin credentials, but continuing..."
            fi
          fi
        else
          echo "   ‚ùå Failed to create API token via REST API"
          echo "   Response: $TOKEN_RESPONSE"
          exit 1
        fi
      else
        echo "   ‚ùå Failed to login via REST API"
        echo "   Response: $LOGIN_RESPONSE"
        exit 1
      fi

      # Store token and credentials in k8s secret
      echo "   Storing credentials in k8s secret..."
      kubectl create secret generic coder-admin-api-token \
        --from-literal=token="$ADMIN_TOKEN" \
        --from-literal=username="$ADMIN_USERNAME" \
        --from-literal=email="$ADMIN_EMAIL" \
        --from-literal=password="$ADMIN_PASSWORD" \
        -n coder \
        --dry-run=client -o yaml | kubectl apply -f - >/dev/null 2>&1

      if [ $? -eq 0 ]; then
        echo "   ‚úÖ Credentials stored successfully"
      else
        echo "   ‚ùå Failed to store credentials"
        exit 1
      fi

      echo "‚úÖ FULLY AUTOMATIC admin user and token creation complete!"
    fi

    echo "üéØ Using admin token ending with: ${ADMIN_TOKEN: -8}"

    # Test API authentication
    echo "   Testing API authentication..."
    AUTH_TEST=$(curl -s -H "Coder-Session-Token: $ADMIN_TOKEN" "$CODER_URL/api/v2/users/me")
    if echo "$AUTH_TEST" | grep -q '"id"'; then
      echo "   ‚úÖ Authentication successful!"
    else
      echo "   ‚ùå API authentication failed"
      echo "   Response: $AUTH_TEST"
      exit 1
    fi

    # Create template tar from ConfigMap files
    echo "üì¶ Preparing template files..."
    cd /template-files
    
    if [ ! -f "main.tf" ] || [ ! -f "README.md" ]; then
      echo "‚ùå Template files missing in ConfigMap"
      exit 1
    fi
    
    tar -czf /tmp/template.tar.gz .
    echo "   ‚úÖ Template archive created"

    # Upload template files
    echo "üì§ Uploading template files..."
    UPLOAD_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/files" \
      -H "Content-Type: application/x-tar" \
      -H "Coder-Session-Token: $ADMIN_TOKEN" \
      --data-binary @/tmp/template.tar.gz)

    FILE_ID=$(echo "$UPLOAD_RESPONSE" | grep -o '"hash":"[^"]*"' | sed 's/"hash":"//;s/"//')
    if [ -z "$FILE_ID" ]; then
      echo "‚ùå Failed to upload template"
      echo "Response: $UPLOAD_RESPONSE"
      exit 1
    fi

    echo "   ‚úÖ Files uploaded (ID: $FILE_ID)"

    # Check for existing template
    echo "üîç Checking for existing template..."
    TEMPLATES_RESPONSE=$(curl -s -H "Coder-Session-Token: $ADMIN_TOKEN" "$CODER_URL/api/v2/organizations/coder/templates")
    TEMPLATE_ID=$(echo "$TEMPLATES_RESPONSE" | grep -o "\"id\":\"[^\"]*\",\"created_at\":[^,]*,\"updated_at\":[^,]*,\"organization_id\":\"[^\"]*\",\"name\":\"$TEMPLATE_NAME\"" | sed 's/"id":"//;s/",.*$//')

    if [ -n "$TEMPLATE_ID" ]; then
      echo "   ‚úÖ Found existing template: $TEMPLATE_ID"
      
      # Create new version
      VERSION_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/organizations/coder/templateversions" \
        -H "Content-Type: application/json" \
        -H "Coder-Session-Token: $ADMIN_TOKEN" \
        -d "{
          \"file_id\": \"$FILE_ID\",
          \"name\": \"$VERSION_NAME\",
          \"template_id\": \"$TEMPLATE_ID\",
          \"message\": \"GitOps automated update with GitHub external auth\"
        }")
    else
      echo "   üÜï Creating new template..."
      
      # Create template and first version
      TEMPLATE_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/organizations/coder/templates" \
        -H "Content-Type: application/json" \
        -H "Coder-Session-Token: $ADMIN_TOKEN" \
        -d "{
          \"name\": \"$TEMPLATE_NAME\",
          \"display_name\": \"Kubernetes (Devcontainer) - GitOps\",
          \"description\": \"Devcontainer workspaces with GitHub external auth\",
          \"file_id\": \"$FILE_ID\",
          \"version_name\": \"$VERSION_NAME\",
          \"message\": \"GitOps template with GitHub external auth\"
        }")
      
      TEMPLATE_ID=$(echo "$TEMPLATE_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"//;s/"//')
      VERSION_RESPONSE="$TEMPLATE_RESPONSE"
    fi

    # Extract version ID and set as active
    VERSION_ID=$(echo "$VERSION_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"//;s/"//')
    if [ -z "$VERSION_ID" ]; then
      echo "‚ùå Failed to create template version"
      echo "Response: $VERSION_RESPONSE"
      exit 1
    fi

    echo "   ‚úÖ Template version created: $VERSION_ID"

    # Set as active version
    echo "üöÄ Setting template as active..."
    curl -s -X PATCH "$CODER_URL/api/v2/templates/$TEMPLATE_ID/versions" \
      -H "Content-Type: application/json" \
      -H "Coder-Session-Token: $ADMIN_TOKEN" \
      -d "{\"id\": \"$VERSION_ID\"}" >/dev/null

    # Trigger build for statistics
    echo "üìä Generating build statistics..."
    curl -s -X POST "$CODER_URL/api/v2/templateversions/$VERSION_ID/dry-run" \
      -H "Content-Type: application/json" \
      -H "Coder-Session-Token: $ADMIN_TOKEN" \
      -d '{
        "workspace_name": "build-test",
        "rich_parameter_values": [
          {"name": "cpu", "value": "2"},
          {"name": "memory", "value": "2"},
          {"name": "workspaces_volume_size", "value": "10"},
          {"name": "repo", "value": "https://github.com/coder/envbuilder-starter-devcontainer"}
        ]
      }' >/dev/null

    echo ""
    echo "üéâ Template automation complete!"
    echo "‚úÖ Template: $TEMPLATE_NAME"
    echo "‚úÖ Version: $VERSION_NAME"
    echo "‚úÖ GitHub external auth enabled"
    echo "‚úÖ Ready for workspace creation!"
    echo ""
    echo "üåê Access: $CODER_URL"
    echo "üìã Next: Create workspace ‚Üí Select template ‚Üí Provide repository URL"