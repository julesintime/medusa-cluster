---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coder-template-init-script
  namespace: coder
  labels:
    app.kubernetes.io/name: coder-template-init-script
    app.kubernetes.io/component: template-automation
    app.kubernetes.io/managed-by: flux
data:
  template-init.sh: |
    #!/bin/sh
    set -e

    # Template automation script with FULLY AUTOMATIC admin user creation
    # Uses coder CLI for complete automation - NO MANUAL STEPS

    # Add shared binaries to PATH
    export PATH="/shared:$PATH"
    
    CODER_URL="https://coder.xuperson.org"
    TEMPLATE_NAME="kubernetes-simple"
    VERSION_NAME="gitops-$(date +%Y%m%d-%H%M%S)"
    TOKEN_NAME="template-automation"

    echo "üèóÔ∏è Setting up Coder template automation..."
    echo "URL: $CODER_URL"
    echo "Template: $TEMPLATE_NAME" 
    echo "Version: $VERSION_NAME"
    
    # Verify binaries are available
    echo "üîß Verifying required binaries..."
    if ! command -v kubectl >/dev/null 2>&1; then
      echo "‚ùå kubectl not found in PATH"
      exit 1
    fi
    if ! command -v coder >/dev/null 2>&1; then
      echo "‚ùå coder CLI not found in PATH"
      exit 1
    fi
    echo "‚úÖ kubectl and coder CLI available"

    # Wait for Coder to be ready
    echo "üì° Waiting for Coder to be ready..."
    for i in $(seq 1 60); do
      if curl -s -f "$CODER_URL/healthz" >/dev/null 2>&1; then
        echo "‚úÖ Coder is ready!"
        break
      fi
      echo "   Attempt $i/60: Coder not ready, waiting..."
      sleep 10
    done

    if ! curl -s -f "$CODER_URL/healthz" >/dev/null 2>&1; then
      echo "‚ùå ERROR: Coder failed to become ready after 10 minutes"
      exit 1
    fi

    # FULLY AUTOMATIC admin user and token creation using Coder CLI
    echo "üîë Creating admin user and token via Coder CLI..."
    
    # Test kubectl access
    echo "   Testing kubectl access..."
    if ! kubectl get secrets -n coder >/dev/null 2>&1; then
      echo "   ‚ùå kubectl access failed"
      exit 1
    fi
    echo "   ‚úÖ kubectl access confirmed"

    # Get credentials from Infisical-synced secret
    ADMIN_EMAIL=$(kubectl get secret coder-admin-credentials -n coder -o jsonpath='{.data.email}' | base64 -d)
    ADMIN_PASSWORD=$(kubectl get secret coder-admin-credentials -n coder -o jsonpath='{.data.password}' | base64 -d)
    
    echo "   üìß Using admin email: $ADMIN_EMAIL"

    # Get Coder pod name for CLI commands
    CODER_POD=$(kubectl get pods -n coder -l app.kubernetes.io/name=coder -o jsonpath='{.items[0].metadata.name}')
    
    if [ -z "$CODER_POD" ]; then
      echo "   ‚ùå Could not find Coder pod"
      exit 1
    fi
    
    echo "   üéØ Using Coder pod: $CODER_POD"

    # Check if admin user already exists, if not create it
    echo "   üîß Creating admin user via Coder CLI..."
    USER_CREATE_OUTPUT=$(kubectl exec -n coder $CODER_POD -- coder server create-admin-user \
      --username admin \
      --email "$ADMIN_EMAIL" \
      --password "$ADMIN_PASSWORD" 2>&1 || echo "USER_EXISTS")

    if echo "$USER_CREATE_OUTPUT" | grep -q "duplicate key"; then
      echo "   ‚úÖ Admin user already exists"
    elif echo "$USER_CREATE_OUTPUT" | grep -q "USER_EXISTS"; then
      echo "   ‚úÖ Admin user already exists (from previous run)"
    else
      echo "   ‚úÖ Admin user created successfully"
    fi

    # Check for existing session token first
    echo "   üîë Checking for existing session token..."
    
    if kubectl get secret coder-admin-session-token -n coder >/dev/null 2>&1; then
      ADMIN_TOKEN=$(kubectl get secret coder-admin-session-token -n coder -o jsonpath='{.data.token}' | base64 -d)
      
      # Test if the token works
      if curl -s -f -H "Coder-Session-Token: $ADMIN_TOKEN" "$CODER_URL/api/v2/users/me" >/dev/null 2>&1; then
        echo "   ‚úÖ Found working session token"
      else
        echo "   ‚ùå Existing token is invalid, need to create new one"
        ADMIN_TOKEN=""
      fi
    else
      echo "   ‚ùå No session token found, need to create one"
      ADMIN_TOKEN=""
    fi
    
    # Create new session token only if needed
    if [ -z "$ADMIN_TOKEN" ]; then
      echo "   üîß Creating new session token via login..."
      
      # Login via API to get session token
      LOGIN_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/users/login" \
        -H "Content-Type: application/json" \
        -d "{
          \"email\": \"$ADMIN_EMAIL\",
          \"password\": \"$ADMIN_PASSWORD\"
        }")
      
      SESSION_TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"session_token":"[^"]*"' | sed 's/"session_token":"//;s/"//')
      
      if [ -n "$SESSION_TOKEN" ]; then
        ADMIN_TOKEN="$SESSION_TOKEN"
        echo "   ‚úÖ Session token created successfully"
        
        # Store the token in Kubernetes secret
        kubectl create secret generic coder-admin-session-token \
          --from-literal=token="$ADMIN_TOKEN" \
          -n coder --dry-run=client -o yaml | kubectl apply -f - >/dev/null 2>&1
        
        echo "   üíæ Token stored in Kubernetes secret"
      else
        echo "   ‚ùå Failed to login and get session token"
        echo "   Login response: $LOGIN_RESPONSE"
        exit 1
      fi
    fi
    
    echo "   üéâ FULLY AUTOMATED ADMIN SETUP COMPLETE!"

    echo "üéØ Using admin token ending with: ${ADMIN_TOKEN: -8}"

    # Test API authentication
    echo "   Testing API authentication..."
    AUTH_TEST=$(curl -s -H "Coder-Session-Token: $ADMIN_TOKEN" "$CODER_URL/api/v2/users/me")
    if echo "$AUTH_TEST" | grep -q '"id"'; then
      echo "   ‚úÖ Authentication successful!"
    else
      echo "   ‚ùå API authentication failed"
      echo "   Response: $AUTH_TEST"
      exit 1
    fi

    # Create additional user: julesintime@gmail.com with GitHub auth
    echo "üë§ Creating user: julesintime@gmail.com..."
    
    # Check if user already exists
    EXISTING_USER=$(curl -s -H "Coder-Session-Token: $ADMIN_TOKEN" "$CODER_URL/api/v2/users" | grep -o '"email":"julesintime@gmail.com"' || true)
    
    if [ -n "$EXISTING_USER" ]; then
      echo "   ‚úÖ User julesintime@gmail.com already exists"
    else
      # Get organization ID first
      echo "   üîç Getting organization ID..."
      ORG_RESPONSE=$(curl -s -H "Coder-Session-Token: $ADMIN_TOKEN" "$CODER_URL/api/v2/organizations")
      ORG_ID=$(echo "$ORG_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"//;s/"//')
      
      if [ -n "$ORG_ID" ]; then
        echo "   ‚úÖ Found organization ID: $ORG_ID"
        
        # Create user via Coder CLI with GitHub authentication 
        USER_CREATE_CMD=$(kubectl exec -n coder $CODER_POD -- coder users create \
          --email "julesintime@gmail.com" \
          --username "julesintime" \
          --login-type "github" 2>&1 || echo "USER_CREATE_ERROR")
        
        if echo "$USER_CREATE_CMD" | grep -q "USER_CREATE_ERROR"; then
          echo "   ‚ùå Failed to create user via CLI, trying API method..."
          
          # Try creating user via API with organization ID
          USER_API_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/users" \
            -H "Content-Type: application/json" \
            -H "Coder-Session-Token: $ADMIN_TOKEN" \
            -d "{
              \"email\": \"julesintime@gmail.com\",
              \"username\": \"julesintime\",
              \"login_type\": \"github\",
              \"organization_ids\": [\"$ORG_ID\"]
            }")
          
          if echo "$USER_API_RESPONSE" | grep -q '"id"'; then
            echo "   ‚úÖ User created successfully via API"
          else
            echo "   ‚ùå Failed to create user via API"
            echo "   Response: $USER_API_RESPONSE"
          fi
        else
          echo "   ‚úÖ User created successfully via CLI"
          echo "   Details: $USER_CREATE_CMD"
        fi
      else
        echo "   ‚ùå Failed to get organization ID"
        echo "   Response: $ORG_RESPONSE"
      fi
    fi

    echo ""
    echo "üéâ Coder setup complete!"
    echo "‚úÖ Admin user: admin@xuperson.org"
    echo "‚úÖ User created: julesintime@gmail.com (GitHub auth)"
    echo "‚úÖ Ready for manual template creation!"
    echo ""
    echo "üåê Access: $CODER_URL"
    echo "üìã Next: Login and create templates manually"