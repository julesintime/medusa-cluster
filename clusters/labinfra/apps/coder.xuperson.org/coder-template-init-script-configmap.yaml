---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coder-template-init-script
  namespace: coder
  labels:
    app.kubernetes.io/name: coder-template-init-script
    app.kubernetes.io/component: template-automation
    app.kubernetes.io/managed-by: flux
data:
  template-init.sh: |
    #!/bin/sh
    set -e

    # Template automation script with FULLY AUTOMATIC admin user creation
    # Uses coder CLI for complete automation - NO MANUAL STEPS

    # Add shared binaries to PATH
    export PATH="/shared:$PATH"
    
    CODER_URL="https://coder.xuperson.org"
    TEMPLATE_NAME="kubernetes-devcontainer"
    VERSION_NAME="gitops-$(date +%Y%m%d-%H%M%S)"
    TOKEN_NAME="template-automation"

    echo "🏗️ Setting up Coder template automation..."
    echo "URL: $CODER_URL"
    echo "Template: $TEMPLATE_NAME" 
    echo "Version: $VERSION_NAME"
    
    # Verify binaries are available
    echo "🔧 Verifying required binaries..."
    if ! command -v kubectl >/dev/null 2>&1; then
      echo "❌ kubectl not found in PATH"
      exit 1
    fi
    if ! command -v coder >/dev/null 2>&1; then
      echo "❌ coder CLI not found in PATH"
      exit 1
    fi
    echo "✅ kubectl and coder CLI available"

    # Wait for Coder to be ready
    echo "📡 Waiting for Coder to be ready..."
    for i in $(seq 1 60); do
      if curl -s -f "$CODER_URL/healthz" >/dev/null 2>&1; then
        echo "✅ Coder is ready!"
        break
      fi
      echo "   Attempt $i/60: Coder not ready, waiting..."
      sleep 10
    done

    if ! curl -s -f "$CODER_URL/healthz" >/dev/null 2>&1; then
      echo "❌ ERROR: Coder failed to become ready after 10 minutes"
      exit 1
    fi

    # FULLY AUTOMATIC admin user and token creation using Coder CLI
    echo "🔑 Creating admin user and token via Coder CLI..."
    
    # Test kubectl access
    echo "   Testing kubectl access..."
    if ! kubectl get secrets -n coder >/dev/null 2>&1; then
      echo "   ❌ kubectl access failed"
      exit 1
    fi
    echo "   ✅ kubectl access confirmed"

    # Get credentials from Infisical-synced secret
    ADMIN_EMAIL=$(kubectl get secret coder-admin-credentials -n coder -o jsonpath='{.data.email}' | base64 -d)
    ADMIN_PASSWORD=$(kubectl get secret coder-admin-credentials -n coder -o jsonpath='{.data.password}' | base64 -d)
    
    echo "   📧 Using admin email: $ADMIN_EMAIL"

    # Get Coder pod name for CLI commands
    CODER_POD=$(kubectl get pods -n coder -l app.kubernetes.io/name=coder -o jsonpath='{.items[0].metadata.name}')
    
    if [ -z "$CODER_POD" ]; then
      echo "   ❌ Could not find Coder pod"
      exit 1
    fi
    
    echo "   🎯 Using Coder pod: $CODER_POD"

    # Check if admin user already exists, if not create it
    echo "   🔧 Creating admin user via Coder CLI..."
    USER_CREATE_OUTPUT=$(kubectl exec -n coder $CODER_POD -- coder server create-admin-user \
      --username admin \
      --email "$ADMIN_EMAIL" \
      --password "$ADMIN_PASSWORD" 2>&1 || echo "USER_EXISTS")

    if echo "$USER_CREATE_OUTPUT" | grep -q "duplicate key"; then
      echo "   ✅ Admin user already exists"
    elif echo "$USER_CREATE_OUTPUT" | grep -q "USER_EXISTS"; then
      echo "   ✅ Admin user already exists (from previous run)"
    else
      echo "   ✅ Admin user created successfully"
    fi

    # Create API token for the admin user
    echo "   🔑 Creating API token via Coder CLI..."
    
    # Set Coder URL environment in the pod and create token
    TOKEN_OUTPUT=$(kubectl exec -n coder $CODER_POD -- bash -c "
      export CODER_URL='$CODER_URL'
      echo '$ADMIN_PASSWORD' | coder login --username '$ADMIN_EMAIL' --password-stdin '$CODER_URL' >/dev/null 2>&1
      coder tokens create --name '$TOKEN_NAME' --lifetime 8760h
    " 2>/dev/null)

    ADMIN_TOKEN=$(echo "$TOKEN_OUTPUT" | grep -v "^Successfully" | grep -v "^$" | head -1)
    
    if [ -n "$ADMIN_TOKEN" ] && [ ${#ADMIN_TOKEN} -gt 20 ]; then
      echo "   ✅ API token created successfully"
      
      # Store the token in Kubernetes secret
      kubectl create secret generic coder-admin-api-token \
        --from-literal=token="$ADMIN_TOKEN" \
        -n coder --dry-run=client -o yaml | kubectl apply -f - >/dev/null 2>&1
      
      echo "   💾 Token stored in Kubernetes secret"
      echo "   🎉 FULLY AUTOMATED ADMIN SETUP COMPLETE!"
    else
      echo "   ❌ Failed to create API token"
      echo "   Output: $TOKEN_OUTPUT"
      exit 1
    fi

    echo "🎯 Using admin token ending with: ${ADMIN_TOKEN: -8}"

    # Test API authentication
    echo "   Testing API authentication..."
    AUTH_TEST=$(curl -s -H "Coder-Session-Token: $ADMIN_TOKEN" "$CODER_URL/api/v2/users/me")
    if echo "$AUTH_TEST" | grep -q '"id"'; then
      echo "   ✅ Authentication successful!"
    else
      echo "   ❌ API authentication failed"
      echo "   Response: $AUTH_TEST"
      exit 1
    fi

    # Create template tar from ConfigMap files
    echo "📦 Preparing template files..."
    cd /template-files
    
    if [ ! -f "main.tf" ] || [ ! -f "README.md" ]; then
      echo "❌ Template files missing in ConfigMap"
      exit 1
    fi
    
    tar -czf /shared/template.tar.gz .
    echo "   ✅ Template archive created"

    # Upload template files
    echo "📤 Uploading template files..."
    UPLOAD_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/files" \
      -H "Content-Type: application/x-tar" \
      -H "Coder-Session-Token: $ADMIN_TOKEN" \
      --data-binary @/shared/template.tar.gz)

    FILE_ID=$(echo "$UPLOAD_RESPONSE" | grep -o '"hash":"[^"]*"' | sed 's/"hash":"//;s/"//')
    if [ -z "$FILE_ID" ]; then
      echo "❌ Failed to upload template"
      echo "Response: $UPLOAD_RESPONSE"
      exit 1
    fi

    echo "   ✅ Files uploaded (ID: $FILE_ID)"

    # Check for existing template
    echo "🔍 Checking for existing template..."
    TEMPLATES_RESPONSE=$(curl -s -H "Coder-Session-Token: $ADMIN_TOKEN" "$CODER_URL/api/v2/organizations/coder/templates")
    TEMPLATE_ID=$(echo "$TEMPLATES_RESPONSE" | grep -o "\"id\":\"[^\"]*\",\"created_at\":[^,]*,\"updated_at\":[^,]*,\"organization_id\":\"[^\"]*\",\"name\":\"$TEMPLATE_NAME\"" | sed 's/"id":"//;s/",.*$//')

    if [ -n "$TEMPLATE_ID" ]; then
      echo "   ✅ Found existing template: $TEMPLATE_ID"
      
      # Create new version
      VERSION_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/organizations/coder/templateversions" \
        -H "Content-Type: application/json" \
        -H "Coder-Session-Token: $ADMIN_TOKEN" \
        -d "{
          \"file_id\": \"$FILE_ID\",
          \"name\": \"$VERSION_NAME\",
          \"template_id\": \"$TEMPLATE_ID\",
          \"message\": \"GitOps automated update with GitHub external auth\",
          \"storage_method\": \"file\",
          \"provisioner\": \"terraform\"
        }")
    else
      echo "   🆕 Creating new template..."
      
      # Create template version first (without template association)
      VERSION_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/organizations/coder/templateversions" \
        -H "Content-Type: application/json" \
        -H "Coder-Session-Token: $ADMIN_TOKEN" \
        -d "{
          \"file_id\": \"$FILE_ID\",
          \"name\": \"$VERSION_NAME\",
          \"message\": \"GitOps template with GitHub external auth\",
          \"storage_method\": \"file\",
          \"provisioner\": \"terraform\"
        }")
      
      VERSION_ID=$(echo "$VERSION_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"//;s/"//')
      
      if [ -z "$VERSION_ID" ]; then
        echo "   ❌ Failed to create template version"
        echo "   Response: $VERSION_RESPONSE"
        exit 1
      fi
      
      echo "   ✅ Template version created: $VERSION_ID"
      
      # Now create template with the version
      TEMPLATE_RESPONSE=$(curl -s -X POST "$CODER_URL/api/v2/organizations/coder/templates" \
        -H "Content-Type: application/json" \
        -H "Coder-Session-Token: $ADMIN_TOKEN" \
        -d "{
          \"name\": \"$TEMPLATE_NAME\",
          \"display_name\": \"Kubernetes (Devcontainer) - GitOps\",
          \"description\": \"Devcontainer workspaces with GitHub external auth\",
          \"template_version_id\": \"$VERSION_ID\"
        }")
      
      TEMPLATE_ID=$(echo "$TEMPLATE_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"//;s/"//')
    fi

    # Extract version ID and set as active
    VERSION_ID=$(echo "$VERSION_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"//;s/"//')
    if [ -z "$VERSION_ID" ]; then
      echo "❌ Failed to create template version"
      echo "Response: $VERSION_RESPONSE"
      exit 1
    fi

    echo "   ✅ Template version created: $VERSION_ID"

    # Set as active version
    echo "🚀 Setting template as active..."
    curl -s -X PATCH "$CODER_URL/api/v2/templates/$TEMPLATE_ID/versions" \
      -H "Content-Type: application/json" \
      -H "Coder-Session-Token: $ADMIN_TOKEN" \
      -d "{\"id\": \"$VERSION_ID\"}" >/dev/null

    # Trigger build for statistics
    echo "📊 Generating build statistics..."
    curl -s -X POST "$CODER_URL/api/v2/templateversions/$VERSION_ID/dry-run" \
      -H "Content-Type: application/json" \
      -H "Coder-Session-Token: $ADMIN_TOKEN" \
      -d '{
        "workspace_name": "build-test",
        "rich_parameter_values": [
          {"name": "cpu", "value": "2"},
          {"name": "memory", "value": "2"},
          {"name": "workspaces_volume_size", "value": "10"},
          {"name": "repo", "value": "https://github.com/coder/envbuilder-starter-devcontainer"}
        ]
      }' >/dev/null

    echo ""
    echo "🎉 Template automation complete!"
    echo "✅ Template: $TEMPLATE_NAME"
    echo "✅ Version: $VERSION_NAME"
    echo "✅ GitHub external auth enabled"
    echo "✅ Ready for workspace creation!"
    echo ""
    echo "🌐 Access: $CODER_URL"
    echo "📋 Next: Create workspace → Select template → Provide repository URL"