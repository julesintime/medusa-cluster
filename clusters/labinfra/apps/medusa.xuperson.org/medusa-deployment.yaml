apiVersion: apps/v1
kind: Deployment
metadata:
  name: medusa
  namespace: medusa
  labels:
    app: medusa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: medusa
  template:
    metadata:
      labels:
        app: medusa
    spec:
      serviceAccountName: medusa
      initContainers:
      - name: wait-for-db
        image: postgres:15-alpine
        command: 
        - sh
        - -c
        - |
          until pg_isready -h medusa-postgresql -p 5432 -U medusa; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: db-password
      - name: medusa-migrate
        image: node:20-alpine
        workingDir: /tmp/medusa-setup
        command:
        - sh
        - -c
        - |
          echo "Setting up Medusa for migrations..."
          mkdir -p /tmp/medusa-setup
          cd /tmp/medusa-setup
          npm init -y
          npm install @medusajs/medusa
          
          # Create minimal medusa-config.js for migrations
          cat > medusa-config.js << 'EOF'
          module.exports = {
            projectConfig: {
              database_url: process.env.DATABASE_URL,
              database_type: "postgres",
              redis_url: process.env.REDIS_URL
            }
          }
          EOF
          
          echo "Running database migrations..."
          npm install ts-node typescript
          npx medusa db:migrate
          echo "Migrations completed!"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: jwt-secret
        - name: COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: cookie-secret
      - name: medusa-seed
        image: node:20-alpine
        workingDir: /tmp/medusa-setup
        command:
        - sh
        - -c
        - |
          echo "Setting up Medusa for seeding..."
          mkdir -p /tmp/medusa-setup
          cd /tmp/medusa-setup
          npm init -y
          npm install @medusajs/medusa
          
          # Create minimal medusa-config.js for seeding
          cat > medusa-config.js << 'EOF'
          module.exports = {
            projectConfig: {
              database_url: process.env.DATABASE_URL,
              database_type: "postgres",
              redis_url: process.env.REDIS_URL
            }
          }
          EOF
          
          echo "Seeding database with sample data..."
          npm install ts-node typescript
          # Skip seeding for now as it requires specific seed files
          echo "Database seeding skipped - will be handled by main application"
          echo "Database seeded!"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: jwt-secret
        - name: COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: cookie-secret
      - name: medusa-create-admin
        image: node:20-alpine
        workingDir: /tmp/medusa-setup
        command:
        - sh
        - -c
        - |
          echo "Setting up Medusa for admin user creation..."
          mkdir -p /tmp/medusa-setup
          cd /tmp/medusa-setup
          npm init -y
          npm install @medusajs/medusa
          
          # Create minimal medusa-config.js for user creation
          cat > medusa-config.js << 'EOF'
          module.exports = {
            projectConfig: {
              database_url: process.env.DATABASE_URL,
              database_type: "postgres",
              redis_url: process.env.REDIS_URL
            }
          }
          EOF
          
          echo "Creating admin user..."
          npm install ts-node typescript
          npx medusa user -e $ADMIN_EMAIL -p $ADMIN_PASSWORD
          echo "Admin user created!"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: jwt-secret
        - name: COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: cookie-secret
        - name: ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: admin-email
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: admin-password
      containers:
      - name: medusa
        image: node:20-alpine
        workingDir: /app
        command: 
        - sh
        - -c
        - |
          echo "Setting up Medusa application..."
          # Create app directory with proper permissions
          mkdir -p /app
          cd /app
          
          # Initialize npm project and install Medusa
          npm init -y
          npm install @medusajs/medusa
          npm install @medusajs/admin
          npm install ts-node typescript
          
          # Create basic medusa-config.js
          cat > medusa-config.js << 'EOF'
          module.exports = {
            projectConfig: {
              redis_url: process.env.REDIS_URL,
              database_url: process.env.DATABASE_URL,
              database_type: "postgres",
              store_cors: process.env.STORE_CORS || "http://localhost:8000",
              admin_cors: process.env.ADMIN_CORS || "http://localhost:7001,http://localhost:7000",
              jwt_secret: process.env.JWT_SECRET,
              cookie_secret: process.env.COOKIE_SECRET
            },
            plugins: [
              {
                resolve: "@medusajs/admin",
                options: {
                  serve: true,
                  path: "/app"
                }
              }
            ]
          }
          EOF
          
          # Start Medusa
          echo "Starting Medusa server..."
          npx medusa develop
        ports:
        - containerPort: 9000
          name: http
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: jwt-secret
        - name: COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: medusa-secrets
              key: cookie-secret
        - name: NODE_ENV
          value: "development"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /health
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 9000
          initialDelaySeconds: 60
          periodSeconds: 30
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
          allowPrivilegeEscalation: false