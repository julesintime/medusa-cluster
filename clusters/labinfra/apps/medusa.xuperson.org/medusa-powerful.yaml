---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: medusa-powerful
  namespace: medusa
  labels:
    app: medusa-powerful
spec:
  replicas: 1
  selector:
    matchLabels:
      app: medusa-powerful
  template:
    metadata:
      labels:
        app: medusa-powerful
    spec:
      initContainers:
      - name: wait-for-deps
        image: busybox:latest
        command:
        - sh
        - -c
        - |
          until nc -z medusa-postgres-postgresql 5432; do echo "waiting for postgres"; sleep 2; done
          until nc -z medusa-redis-master 6379; do echo "waiting for redis"; sleep 2; done
          echo "Dependencies ready!"
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
            cpu: 200m

      containers:
      - name: medusa
        image: node:20-alpine
        command:
        - sh
        - -c
        - |
          set -e
          echo "🚀 Starting Medusa installation with HIGH POWER!"

          # Install dependencies
          apk add --no-cache git python3 make g++ curl postgresql-client

          # Set npm config for better performance
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retries 3

          # Clone Medusa starter
          echo "📦 Cloning Medusa starter..."
          git clone https://github.com/medusajs/medusa-starter-default.git /app
          cd /app

          # Install with high resources
          echo "⚡ Installing packages with FULL POWER..."
          npm install --production=false --maxsockets=10

          # Wait for database
          echo "🗄️ Setting up database..."
          until PGPASSWORD=postgres123 psql -h medusa-postgres-postgresql -U postgres -c '\l' > /dev/null 2>&1; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

          # Create database if not exists
          PGPASSWORD=postgres123 psql -h medusa-postgres-postgresql -U postgres -c "CREATE DATABASE medusa;" || echo "Database exists"
          PGPASSWORD=postgres123 psql -h medusa-postgres-postgresql -U postgres -c "CREATE USER medusa WITH PASSWORD 'medusa123';" || echo "User exists"
          PGPASSWORD=postgres123 psql -h medusa-postgres-postgresql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE medusa TO medusa;" || echo "Permissions granted"

          # Run migrations
          echo "🔄 Running migrations..."
          npm run build
          npx medusa migrations run

          # Create admin user
          echo "👤 Creating admin user..."
          npx medusa user -e admin@medusa.xuperson.org -p admin123 || echo "User exists"

          # Start server
          echo "🎯 Starting Medusa server..."
          exec npm run start

        ports:
        - name: http
          containerPort: 9000
          protocol: TCP

        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "9000"
        - name: DATABASE_URL
          value: "postgresql://medusa:medusa123@medusa-postgres-postgresql:5432/medusa"
        - name: REDIS_URL
          value: "redis://medusa-redis-master:6379"
        - name: JWT_SECRET
          value: "supersecretjwtkey123456789"
        - name: COOKIE_SECRET
          value: "supersecretcookiekey123456789"
        - name: ADMIN_CORS
          value: "https://medusa-console.xuperson.org,http://localhost:7000"
        - name: STORE_CORS
          value: "https://medusa.xuperson.org,http://localhost:8000"

        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10

        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 180
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5

        # 🔥 MASSIVE RESOURCES FOR BUILD POWER! 🔥
        resources:
          requests:
            memory: 4Gi
            cpu: 2000m
          limits:
            memory: 8Gi
            cpu: 4000m

        volumeMounts:
        - name: tmp-storage
          mountPath: /tmp
        - name: npm-cache
          mountPath: /root/.npm

      volumes:
      - name: tmp-storage
        emptyDir:
          sizeLimit: 8Gi
      - name: npm-cache
        emptyDir:
          sizeLimit: 4Gi

---
apiVersion: v1
kind: Service
metadata:
  name: medusa-powerful
  namespace: medusa
spec:
  selector:
    app: medusa-powerful
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  type: ClusterIP