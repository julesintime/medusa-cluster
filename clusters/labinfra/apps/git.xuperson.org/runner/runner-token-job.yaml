---
apiVersion: batch/v1
kind: Job
metadata:
  name: gitea-runner-token-generator
  namespace: gitea
spec:
  ttlSecondsAfterFinished: 300  # Clean up after 5 minutes
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: gitea-runner-token-generator
    spec:
      restartPolicy: OnFailure
      serviceAccountName: gitea-runner-init
      volumes:
      - name: kubectl-binary
        emptyDir: {}
      initContainers:
      - name: install-kubectl
        image: alpine/k8s:1.30.3
        command:
        - sh
        - -c
        - cp /usr/local/bin/kubectl /shared/kubectl && chmod +x /shared/kubectl
        volumeMounts:
        - name: kubectl-binary
          mountPath: /shared
      containers:
      - name: generate-token
        image: alpine:latest
        volumeMounts:
        - name: kubectl-binary
          mountPath: /shared
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "ÔøΩ Installing required packages..."
          apk add --no-cache curl
          echo "‚úÖ Packages installed"
          
          echo "ÔøΩüîë Managing Gitea runner registration token with consistency checks..."
          
          # Get admin credentials
          ADMIN_USER=$(/shared/kubectl get secret gitea-admin-secrets -n gitea -o jsonpath='{.data.username}' | base64 -d)
          ADMIN_PASS=$(/shared/kubectl get secret gitea-admin-secrets -n gitea -o jsonpath='{.data.password}' | base64 -d)
          
          # Test Gitea API connection
          echo "üì° Testing Gitea API connection..."
          until curl -s -f -u "$ADMIN_USER:$ADMIN_PASS" "http://gitea-http:3000/api/v1/version" >/dev/null; do
            echo "   Gitea API not ready, waiting 5 seconds..."
            sleep 5
          done
          echo "‚úÖ Gitea API is accessible"
          
          # Test kubectl access
          echo "   Testing kubectl access..."
          if ! /shared/kubectl get secrets -n gitea >/dev/null 2>&1; then
            echo "   ‚ùå kubectl access failed"
            exit 1
          fi
          echo "   ‚úÖ kubectl access confirmed"
          
          SECRET_EXISTS=false
          K8S_TOKEN=""
          echo "   Checking for existing k8s runner-secret..."
          if /shared/kubectl get secret runner-secret -n gitea >/dev/null 2>&1; then
            SECRET_EXISTS=true
            K8S_TOKEN=$(/shared/kubectl get secret runner-secret -n gitea -o jsonpath='{.data.token}' | base64 -d 2>/dev/null)
            if [ -n "$K8S_TOKEN" ]; then
              echo "   ‚úÖ Found existing k8s secret with token (length: ${#K8S_TOKEN})"
            else
              echo "   ‚ùå Secret exists but token is empty"
              SECRET_EXISTS=false
            fi
          else
            echo "   ‚ùå No k8s runner-secret found"
          fi
          
          # For runner tokens, we can't easily check existing tokens in Gitea
          # The runner registration token API always generates a fresh one
          # So we'll use a simpler strategy: if we have a k8s secret, test it
          
          CREATE_NEW=true
          if [ "$SECRET_EXISTS" = true ] && [ -n "$K8S_TOKEN" ]; then
            echo "   Testing existing runner token..."
            # We can't easily test runner tokens, so we'll regenerate to be safe
            echo "   Will regenerate runner token for consistency"
          fi
          
          if [ "$CREATE_NEW" = true ]; then
            echo "üèóÔ∏è Generating fresh runner registration token via API..."
            
            # Wait for Gitea to be ready
            echo "   Waiting for Gitea to be ready..."
            until /shared/kubectl get deployment gitea -n gitea >/dev/null 2>&1 && \
                  [ "$(/shared/kubectl get deployment gitea -n gitea -o jsonpath='{.status.readyReplicas}')" = "1" ]; do
              echo "   Waiting for Gitea deployment to be ready..."
              sleep 10
            done
            
            echo "   ‚úÖ Gitea deployment ready!"
            
            # Generate runner registration token via API (GET method, not POST)
            echo "   Creating runner registration token via API..."
            TOKEN_RESPONSE=$(curl -s "http://gitea-http:3000/api/v1/admin/runners/registration-token" \
              -u "$ADMIN_USER:$ADMIN_PASS")
            
            # Extract token from JSON response
            RUNNER_TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"token":"[^"]*"' | sed 's/"token":"//;s/"//')
            
            if [ -z "$RUNNER_TOKEN" ]; then
              echo "   ‚ùå Failed to generate runner token via API"
              echo "   API Response: $TOKEN_RESPONSE"
              exit 1
            fi
            
            if [ -z "$RUNNER_TOKEN" ]; then
              echo "   ‚ùå Failed to generate runner token"
              exit 1
            fi
            
            echo "   ‚úÖ Runner token generated successfully (length: ${#RUNNER_TOKEN})"
            
            # Clean up old secret and create new one
            echo "   üßπ Cleaning up old runner registration..."
            /shared/kubectl delete secret runner-secret -n gitea --ignore-not-found=true
            
            /shared/kubectl create secret generic runner-secret \
              --from-literal=token="$RUNNER_TOKEN" \
              --namespace=gitea
            
            echo "   üíæ Fresh runner registration token stored in 'runner-secret'"
            echo "   üéØ Ready for clean runner registration"
          fi
        
        resources:
          requests:
            memory: "32Mi" 
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
