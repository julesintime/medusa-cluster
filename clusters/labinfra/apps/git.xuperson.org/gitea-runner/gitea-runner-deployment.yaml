---
apiVersion: v1
kind: ConfigMap
metadata:
  name: runner-setup-script
  namespace: gitea
  labels:
    app.kubernetes.io/name: gitea-runner
    app.kubernetes.io/component: ci-cd
    app.kubernetes.io/managed-by: flux
data:
  runner-setup.sh: |
    #!/bin/sh
    set -e

    echo "üîÑ Setting up Gitea runner registration..."

    # Get admin credentials
    ADMIN_USER=$(/usr/local/bin/kubectl get secret gitea-admin-secrets -n gitea -o jsonpath='{.data.username}' | base64 -d)
    ADMIN_PASS=$(/usr/local/bin/kubectl get secret gitea-admin-secrets -n gitea -o jsonpath='{.data.password}' | base64 -d)

    # Test Gitea API connection
    echo "üì° Testing Gitea API connection..."
    until curl -s -f -u "$ADMIN_USER:$ADMIN_PASS" "http://gitea-http:3000/api/v1/version" >/dev/null; do
      echo "   Gitea API not ready, waiting 5 seconds..."
      sleep 5
    done
    echo "‚úÖ Gitea API is accessible"

    # Get or create admin API token
    echo "üîë Getting admin API token..."
    TOKENS_RESPONSE=$(curl -s -u "$ADMIN_USER:$ADMIN_PASS" "http://gitea-http:3000/api/v1/users/$ADMIN_USER/tokens")
    
    # Extract first token if exists
    ADMIN_TOKEN=$(echo "$TOKENS_RESPONSE" | grep -o '"sha1":"[a-f0-9]*"' | head -1 | sed 's/"sha1":"//;s/"//')

    # If no token exists, create one
    if [ -z "$ADMIN_TOKEN" ]; then
      echo "üèóÔ∏è Creating new admin API token..."
      RESPONSE=$(curl -s -X POST "http://gitea-http:3000/api/v1/users/$ADMIN_USER/tokens" \
        -H "Content-Type: application/json" \
        -u "$ADMIN_USER:$ADMIN_PASS" \
        -d '{"name": "runner-automation", "scopes": ["all"]}')
      
      ADMIN_TOKEN=$(echo "$RESPONSE" | grep -o '"sha1":"[a-f0-9]*"' | sed 's/"sha1":"//;s/"//')
    fi

    if [ -z "$ADMIN_TOKEN" ] || [ ${#ADMIN_TOKEN} -ne 40 ]; then
      echo "‚ùå Failed to get admin token"
      exit 1
    fi
    echo "‚úÖ Got admin API token (length: ${#ADMIN_TOKEN})"

    # Get fresh registration token
    echo "üé´ Getting fresh registration token..."
    TOKEN_RESPONSE=$(curl -s -H "Authorization: token $ADMIN_TOKEN" "http://gitea-http:3000/api/v1/admin/runners/registration-token")

    REGISTRATION_TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"token":"[^"]*"' | sed 's/"token":"//;s/"//')

    if [ -z "$REGISTRATION_TOKEN" ] || [ ${#REGISTRATION_TOKEN} -lt 20 ]; then
      echo "‚ùå Failed to get valid registration token"
      echo "Response: $TOKEN_RESPONSE"
      exit 1
    fi

    echo "‚úÖ Got registration token (length: ${#REGISTRATION_TOKEN})"

    # Clean up old runner secret and create new one
    echo "üßπ Cleaning up old runner registration..."
    /usr/local/bin/kubectl delete secret runner-secret -n gitea --ignore-not-found=true

    /usr/local/bin/kubectl create secret generic runner-secret \
      --from-literal=token="$REGISTRATION_TOKEN" \
      --namespace=gitea

    echo "üíæ Fresh runner registration token stored in 'runner-secret'"
    echo "üéØ Ready for clean runner registration"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: act-runner-vol
  namespace: gitea
  labels:
    app.kubernetes.io/name: gitea-runner
    app.kubernetes.io/part-of: gitea
    app.kubernetes.io/component: ci-cd
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: act-runner
    app.kubernetes.io/name: gitea-runner
    app.kubernetes.io/part-of: gitea
    app.kubernetes.io/component: ci-cd
  name: act-runner
  namespace: gitea
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-runner
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: act-runner
    spec:
      restartPolicy: Always
      serviceAccountName: gitea-runner-init
      initContainers:
      - name: install-node
        image: gitea/act_runner:nightly-dind-rootless
        command:
        - sh
        - -c
        - |
          apk add --no-cache nodejs npm
          echo "Node.js installed successfully"
          node --version
          npm --version
        volumeMounts:
        - name: runner-data
          mountPath: /data
      volumes:
      - name: runner-data
        persistentVolumeClaim:
          claimName: act-runner-vol
      securityContext:
        fsGroup: 1000
      containers:
      - name: runner
        image: gitea/act_runner:nightly-dind-rootless
        imagePullPolicy: Always
        env:
        - name: DOCKER_HOST
          value: tcp://localhost:2376
        - name: DOCKER_CERT_PATH
          value: /certs/client
        - name: DOCKER_TLS_VERIFY
          value: "1"
        - name: GITEA_INSTANCE_URL
          value: https://git.xuperson.org
        - name: GITEA_RUNNER_REGISTRATION_TOKEN
          valueFrom:
            secretKeyRef:
              name: runner-secret
              key: token
        - name: GITEA_RUNNER_NAME
          value: "sole-k8s-runner"
        - name: GITEA_RUNNER_LABELS
          value: "ubuntu-latest,ubuntu-22.04,buildkit"
        securityContext:
          privileged: true
        volumeMounts:
        - name: runner-data
          mountPath: /data
        resources:
          limits:
            cpu: 1500m
            memory: 2Gi
          requests:
            cpu: 250m
            memory: 512Mi