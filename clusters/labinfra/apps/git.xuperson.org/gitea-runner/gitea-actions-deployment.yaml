---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitea-actions-runner
  namespace: gitea
  labels:
    app.kubernetes.io/name: gitea-actions-runner
    app.kubernetes.io/managed-by: flux
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gitea-actions-runner
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gitea-actions-runner
    spec:
      serviceAccountName: gitea-runner-init
      restartPolicy: Always
      initContainers:
        - name: generate-runner-token
          image: bitnami/kubectl:latest
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Checking if runner token already exists..."
              
              # Check if token secret already exists and is valid
              if kubectl get secret gitea-runner-token -n gitea >/dev/null 2>&1; then
                TOKEN=$(kubectl get secret gitea-runner-token -n gitea -o jsonpath='{.data.token}' | base64 -d 2>/dev/null || echo "")
                if [ ! -z "$TOKEN" ] && [ ${#TOKEN} -gt 10 ]; then
                  echo "Valid runner token already exists, skipping generation"
                  exit 0
                fi
              fi
              
              echo "Generating new runner token..."
              
              # Wait for Gitea to be ready
              echo "Waiting for Gitea to be ready..."
              until kubectl get deployment gitea -n gitea >/dev/null 2>&1 && \
                    [ "$(kubectl get deployment gitea -n gitea -o jsonpath='{.status.readyReplicas}')" = "1" ]; do
                echo "Waiting for Gitea deployment to be ready..."
                sleep 10
              done
              
              # Get Gitea pod
              GITEA_POD=$(kubectl get pods -n gitea -l app.kubernetes.io/name=gitea -o jsonpath='{.items[0].metadata.name}')
              
              if [ -z "$GITEA_POD" ]; then
                echo "No Gitea pod found"
                exit 1
              fi
              
              echo "Found Gitea pod: $GITEA_POD"
              
              # Wait for Gitea application to be ready (with timeout)
              echo "Waiting for Gitea application to be ready..."
              for i in {1..30}; do
                if kubectl exec -n gitea $GITEA_POD -- gitea actions generate-runner-token >/dev/null 2>&1; then
                  echo "Gitea is ready!"
                  break
                fi
                echo "Attempt $i/30: Waiting for Gitea application to respond..."
                sleep 10
                if [ $i -eq 30 ]; then
                  echo "Timeout waiting for Gitea to be ready"
                  exit 1
                fi
              done
              
              # Generate token
              echo "Generating runner token..."
              RUNNER_TOKEN=$(kubectl exec -n gitea $GITEA_POD -- gitea actions generate-runner-token | tr -d '\r\n' || echo "")
              
              if [ -z "$RUNNER_TOKEN" ]; then
                echo "Failed to generate runner token"
                exit 1
              fi
              
              echo "Runner token generated successfully (length: ${#RUNNER_TOKEN})"
              
              # Create/update the secret
              kubectl create secret generic gitea-runner-token -n gitea \
                --from-literal=token="$RUNNER_TOKEN" \
                --dry-run=client -o yaml | kubectl apply -f -
              
              echo "Runner token stored in secret 'gitea-runner-token'"
          
          resources:
            requests:
              memory: "32Mi" 
              cpu: "50m"
            limits:
              memory: "64Mi"
              cpu: "100m"
      volumes:
        - name: docker-certs
          emptyDir: {}
        - name: runner-data
          emptyDir: {}
      containers:
        - name: runner
          image: gitea/act_runner:0.2.12
          command: ["sh", "-c", "while ! nc -z localhost 2376 </dev/null; do echo 'waiting for docker daemon...'; sleep 5; done; /sbin/tini -- run.sh"]
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2376
            - name: DOCKER_CERT_PATH
              value: /certs/client
            - name: DOCKER_TLS_VERIFY
              value: "1"
            - name: GITEA_INSTANCE_URL
              value: http://gitea-http.gitea.svc.cluster.local:3000
            - name: GITEA_RUNNER_REGISTRATION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: gitea-runner-token
                  key: token
          volumeMounts:
            - name: docker-certs
              mountPath: /certs
            - name: runner-data
              mountPath: /data
          resources:
            limits:
              cpu: 2000m
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 256Mi
        - name: dind
          image: docker:23.0.6-dind
          env:
            - name: DOCKER_TLS_CERTDIR
              value: /certs
          securityContext:
            privileged: true
          volumeMounts:
            - name: docker-certs
              mountPath: /certs
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 50m
              memory: 128Mi
