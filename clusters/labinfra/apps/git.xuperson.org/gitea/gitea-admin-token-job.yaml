---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: gitea-admin-token-sync
  namespace: gitea
  labels:
    app.kubernetes.io/name: gitea-admin-token-sync
    app.kubernetes.io/component: token-management
    app.kubernetes.io/managed-by: flux
spec:
  schedule: "*/5 * * * *"  # Run every 5 minutes
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 300
      template:
        metadata:
          labels:
            app.kubernetes.io/name: gitea-admin-token-sync
        spec:
          restartPolicy: OnFailure
          serviceAccountName: gitea-runner-init
          initContainers:
          - name: wait-for-gitea
            image: curlimages/curl:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "üîÑ Waiting for Gitea to be ready..."
              until curl -f -s http://gitea-http:3000/api/v1/version; do
                echo "   Gitea not ready, waiting 10 seconds..."
                sleep 10
              done
              echo "‚úÖ Gitea is ready!"
          containers:
          - name: sync-admin-token
            image: curlimages/curl:latest
            env:
            - name: GITEA_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: gitea-admin-secrets
                  key: username
            - name: GITEA_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gitea-admin-secrets
                  key: password
            command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "üîÑ Syncing Gitea admin token..."

              # List existing tokens
              echo "üìã Listing existing admin tokens..."
              TOKENS=$(curl -s "http://gitea-http:3000/api/v1/users/$GITEA_ADMIN_USERNAME/tokens" \
                -u "$GITEA_ADMIN_USERNAME:$GITEA_ADMIN_PASSWORD")

              echo "Tokens response: $TOKENS"

              # Check if we have any tokens
              TOKEN_COUNT=$(echo "$TOKENS" | jq '. | length' 2>/dev/null || echo "0")

              if [ "$TOKEN_COUNT" -gt 0 ]; then
                echo "‚úÖ Found $TOKEN_COUNT existing token(s), using first one..."
                ADMIN_TOKEN=$(echo "$TOKENS" | jq -r '.[0].sha1' 2>/dev/null || echo "")
                TOKEN_NAME=$(echo "$TOKENS" | jq -r '.[0].name' 2>/dev/null || echo "existing-token")
              else
                echo "üèóÔ∏è No tokens found, creating new one..."
                RESPONSE=$(curl -s -X POST "http://gitea-http:3000/api/v1/users/$GITEA_ADMIN_USERNAME/tokens" \
                  -H "Content-Type: application/json" \
                  -u "$GITEA_ADMIN_USERNAME:$GITEA_ADMIN_PASSWORD" \
                  -d '{
                    "name": "flux-automation",
                    "scopes": ["read:activitypub", "read:issue", "write:misc", "read:notification", "read:organization", "read:package", "read:repository", "read:user", "write:admin", "write:repository", "write:user"]
                  }')

                echo "Create token response: $RESPONSE"
                ADMIN_TOKEN=$(echo "$RESPONSE" | jq -r '.sha1' 2>/dev/null || echo "")
                TOKEN_NAME="flux-automation"
              fi

              if [ -z "$ADMIN_TOKEN" ] || [ "$ADMIN_TOKEN" = "null" ]; then
                echo "‚ùå Failed to get admin token"
                exit 1
              fi

              echo "‚úÖ Admin token ready: $TOKEN_NAME (length: ${#ADMIN_TOKEN})"

              # Update the Kubernetes secret
              cat <<EOF | kubectl apply -f -
              apiVersion: v1
              kind: Secret
              metadata:
                name: gitea-admin-api-token
                namespace: gitea
              type: Opaque
              data:
                token: $(echo -n "$ADMIN_TOKEN" | base64)
              EOF

              echo "üíæ Admin token synced to secret 'gitea-admin-api-token'"

            resources:
              requests:
                memory: "32Mi"
                cpu: "50m"
              limits:
                memory: "64Mi"
                cpu: "100m"
