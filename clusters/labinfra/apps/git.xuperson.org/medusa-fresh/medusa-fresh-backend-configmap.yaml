apiVersion: v1
kind: ConfigMap
metadata:
  name: medusa-fresh-backend-config
  namespace: gitea
data:
  package.json: |
    {
      "name": "my-medusa-store",
      "version": "1.0.0",
      "description": "Medusa v2 backend for e-commerce platform",
      "main": "dist/main.js",
      "scripts": {
        "dev": "medusa develop",
        "build": "medusa build",
        "start": "./start.sh",
        "seed": "medusa seed",
        "migrations:run": "medusa migrations run",
        "migrations:revert": "medusa migrations revert"
      },
      "dependencies": {
        "@medusajs/admin-sdk": "^2.0.0",
        "@medusajs/framework": "^2.0.0",
        "@medusajs/medusa": "^2.0.0",
        "@medusajs/medusa-cli": "^2.0.0",
        "@medusajs/file": "^2.0.0",
        "@medusajs/payment": "^2.0.0",
        "@medusajs/pricing": "^2.0.0",
        "@medusajs/product": "^2.0.0",
        "@medusajs/stock-location": "^2.0.0",
        "@medusajs/store": "^2.0.0",
        "@medusajs/tax": "^2.0.0",
        "@medusajs/user": "^2.0.0",
        "@medusajs/workflow": "^2.0.0",
        "pg": "^8.11.3",
        "ioredis": "^5.3.2",
        "dotenv": "^16.3.1",
        "cors": "^2.8.5",
        "express": "^4.18.2"
      },
      "devDependencies": {
        "@types/node": "^20.0.0",
        "typescript": "^5.0.0"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    }

  medusa-config.ts: |
    import { defineConfig } from '@medusajs/framework/utils'

    export default defineConfig({
      projectConfig: {
        redisUrl: process.env.REDIS_URL || "redis://localhost:6379",
        databaseUrl: process.env.DATABASE_URL || "postgres://postgres:medusa@localhost:5432/medusa",
        databaseType: "postgres",
        http: {
          storeCors: process.env.STORE_CORS || "http://localhost:3000",
          adminCors: process.env.ADMIN_CORS || "http://localhost:9000",
          authCors: process.env.AUTH_CORS || "http://localhost:9000",
          jwtSecret: process.env.JWT_SECRET || "supersecret",
          cookieSecret: process.env.COOKIE_SECRET || "supersecret"
        }
      },
      admin: {
        path: "/app",
        disable: false,
        backendUrl: process.env.MEDUSA_BACKEND_URL || "http://localhost:9000",
        outdir: "./build"
      },
      modules: {
        // Core modules
        eventBusRedis: {
          resolve: "@medusajs/event-bus-redis",
          options: {
            redisUrl: process.env.REDIS_URL || "redis://localhost:6379"
          }
        },
        cacheRedis: {
          resolve: "@medusajs/cache-redis",
          options: {
            redisUrl: process.env.REDIS_URL || "redis://localhost:6379"
          }
        },
        workflowEngineRedis: {
          resolve: "@medusajs/workflow-engine-redis",
          options: {
            redis: {
              url: process.env.REDIS_URL || "redis://localhost:6379"
            }
          }
        }
      },
      plugins: [
        {
          resolve: "@medusajs/admin",
          options: {
            autoRebuild: false,
            path: "/app",
            outDir: "./build",
            develop: {
              open: false
            }
          }
        }
      ]
    })

  start.sh: |
    #!/bin/sh
    set -e

    echo "Starting Medusa backend..."

    # Wait for database
    echo "Waiting for database connection..."
    until pg_isready -h ${DATABASE_HOST:-medusa-postgres-postgresql} -p 5432; do
      echo "Database not ready, waiting..."
      sleep 5
    done

    echo "Running database migrations..."
    npx medusa migrations run || true

    # Seed database if needed
    if [ "$SEED_DATABASE" = "true" ]; then
      echo "Seeding database..."
      npx medusa seed || true
    fi

    # Build admin UI if needed
    if [ ! -d "./build" ]; then
      echo "Building admin UI..."
      npx medusa build || true
    fi

    echo "Starting Medusa server..."
    npx medusa start

  Dockerfile: |
    # Multi-stage build for Medusa backend
    FROM node:20-alpine AS builder

    WORKDIR /app

    # Copy package files
    COPY package*.json ./

    # Install dependencies
    RUN npm install --only=production

    # Copy application code
    COPY . .

    # Build the application
    RUN npm run build || true

    # Production stage
    FROM node:20-alpine

    RUN apk add --no-cache postgresql-client

    WORKDIR /app

    # Copy from builder
    COPY --from=builder /app/node_modules ./node_modules
    COPY --from=builder /app/package*.json ./
    COPY --from=builder /app/dist ./dist
    COPY --from=builder /app/build ./build
    COPY --from=builder /app/medusa-config.ts ./
    COPY --from=builder /app/start.sh ./

    RUN chmod +x start.sh

    EXPOSE 9000

    HEALTHCHECK --interval=30s --timeout=3s --start-period=60s \
      CMD node -e "require('http').get('http://localhost:9000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

    CMD ["./start.sh"]

  .gitea_workflows_backend-ci.yml: |
    name: Build Medusa Backend
    on:
      push:
        branches: [main, master]
        paths:
          - 'my-medusa-store/**'
          - '.gitea/workflows/backend-ci.yml'

    jobs:
      build:
        runs-on: ubuntu-latest
        steps:
        - name: Build and push backend with buildctl
          run: |
            set -e

            # Configuration
            IMAGE_BASE="medusa-backend"
            IMAGE_TAG="main-$(echo ${GITEA_SHA} | cut -c1-8)"
            IMAGE_FULL="git.xuperson.org/helloroot/${IMAGE_BASE}:${IMAGE_TAG}"
            REGISTRY_URL="gitea-http.gitea.svc.cluster.local:3000"

            echo "ðŸš€ Building Medusa backend image: ${IMAGE_FULL}"

            # Get credentials from Kubernetes secrets
            ADMIN_USER=$(kubectl get secret gitea-admin-secrets -n gitea -o jsonpath='{.data.username}' | base64 -d)
            ADMIN_PASS=$(kubectl get secret gitea-admin-secrets -n gitea -o jsonpath='{.data.password}' | base64 -d)

            # Clone repository
            git clone "http://${ADMIN_USER}:${ADMIN_PASS}@${REGISTRY_URL}/helloroot/medusa-fresh.git" /tmp/repo
            cd /tmp/repo/my-medusa-store

            # Build with BuildKit
            buildctl build \
              --frontend dockerfile.v0 \
              --local context=. \
              --local dockerfile=. \
              --output type=image,name=${IMAGE_FULL},push=true,registry.insecure=true \
              --opt platform=linux/amd64 \
              --opt filename=Dockerfile

            echo "âœ… Backend image pushed successfully: ${IMAGE_FULL}"