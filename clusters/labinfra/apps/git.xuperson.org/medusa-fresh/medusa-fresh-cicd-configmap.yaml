apiVersion: v1
kind: ConfigMap
metadata:
  name: medusa-fresh-cicd-config
  namespace: gitea
data:
  medusa-fresh-ci.yml: |
    name: Medusa Fresh Build and Push
    
    on:
      push:
        branches: [main, master]
    
    jobs:
      build:
        runs-on: ubuntu-latest
        steps:
        - name: Build and push Medusa backend and storefront
          run: |
            set -e
            
            echo "🚀 Starting Medusa Fresh CI/CD Pipeline..."
            
            # Configuration
            REPO_URL="${{ gitea.server_url }}/${{ gitea.repository }}.git"
            BACKEND_IMAGE_BASE="gitea-http.gitea.svc.cluster.local:3000/helloroot/medusa-backend"  
            STOREFRONT_IMAGE_BASE="gitea-http.gitea.svc.cluster.local:3000/helloroot/medusa-storefront"
            
            # Clone repository
            git clone "$REPO_URL" repo
            cd repo
            git checkout "${{ gitea.sha }}"
            
            # Get commit info
            COMMIT_SHA=$(git rev-parse --short HEAD)
            BRANCH_NAME=${{ gitea.ref_name }}
            
            # Generate image tags for proper Flux alphabetical ordering
            if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
              BACKEND_TAG="$BACKEND_IMAGE_BASE:main-$COMMIT_SHA"
              STOREFRONT_TAG="$STOREFRONT_IMAGE_BASE:main-$COMMIT_SHA"
              LATEST_BACKEND_TAG="$BACKEND_IMAGE_BASE:latest"
              LATEST_STOREFRONT_TAG="$STOREFRONT_IMAGE_BASE:latest"
            else
              BACKEND_TAG="$BACKEND_IMAGE_BASE:$BRANCH_NAME-$COMMIT_SHA"
              STOREFRONT_TAG="$STOREFRONT_IMAGE_BASE:$BRANCH_NAME-$COMMIT_SHA"
            fi
            
            echo "📦 Building tags:"
            echo "  Backend: $BACKEND_TAG"
            echo "  Storefront: $STOREFRONT_TAG"
            
            # Setup Docker authentication
            ADMIN_USER="${{ secrets.ADMIN_USER }}"
            ADMIN_PASS="${{ secrets.ADMIN_PASS }}"
            mkdir -p ~/.docker
            AUTH_STRING=$(echo -n "$ADMIN_USER:$ADMIN_PASS" | base64)
            cat > ~/.docker/config.json << EOF
            {
              "auths": {
                "gitea-http.gitea.svc.cluster.local:3000": {
                  "auth": "$AUTH_STRING"
                }
              }
            }
            EOF
            
            # Build Backend
            echo "🏗️ Building Medusa Backend..."
            cd my-medusa-store
            buildctl --addr $BUILDKIT_HOST build \
              --frontend dockerfile.v0 \
              --local context=. \
              --local dockerfile=. \
              --output type=image,name="$BACKEND_TAG",push=true,registry.insecure=true
            
            if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
              buildctl --addr $BUILDKIT_HOST build \
                --frontend dockerfile.v0 \
                --local context=. \
                --local dockerfile=. \
                --output type=image,name="$LATEST_BACKEND_TAG",push=true,registry.insecure=true
            fi
            
            cd ..
            
            # Build Storefront  
            echo "🌐 Building Medusa Storefront..."
            cd my-medusa-storefront
            buildctl --addr $BUILDKIT_HOST build \
              --frontend dockerfile.v0 \
              --local context=. \
              --local dockerfile=. \
              --opt target=production \
              --output type=image,name="$STOREFRONT_TAG",push=true,registry.insecure=true
            
            if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
              buildctl --addr $BUILDKIT_HOST build \
                --frontend dockerfile.v0 \
                --local context=. \
                --local dockerfile=. \
                --opt target=production \
                --output type=image,name="$LATEST_STOREFRONT_TAG",push=true,registry.insecure=true
            fi
            
            echo "✅ Medusa Fresh build completed successfully!"
            echo "🐳 Backend image: $BACKEND_TAG"
            echo "🌐 Storefront image: $STOREFRONT_TAG"
            echo "🚀 Images pushed to internal registry"
            echo "📡 Flux will detect and deploy automatically"