---
apiVersion: batch/v1
kind: Job
metadata:
  name: claude-code-wrapper-repo-init
  namespace: gitea
  labels:
    app.kubernetes.io/name: claude-code-wrapper
    app.kubernetes.io/component: repo-init
    app.kubernetes.io/managed-by: flux
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: repo-init
        image: alpine/git:latest
        env:
        - name: GITEA_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: gitea-admin-credentials
              key: username
        - name: GITEA_ADMIN_PASS
          valueFrom:
            secretKeyRef:
              name: gitea-admin-credentials
              key: password
        - name: REPO_NAME
          value: "claude-code-wrapper"
        - name: GITEA_URL
          value: "http://gitea-http.gitea.svc.cluster.local:3000"
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e
          apk add --no-cache curl jq
          
          echo "🔧 Setting up Claude Code Wrapper repository..."
          
          # Create repository in Gitea
          echo "📝 Creating repository: $REPO_NAME"
          curl -X POST \
            -H "Content-Type: application/json" \
            -u "$GITEA_ADMIN_USER:$GITEA_ADMIN_PASS" \
            -d '{
              "name": "'$REPO_NAME'",
              "description": "Claude Code OpenAI API Wrapper with CI/CD",
              "private": false,
              "auto_init": true,
              "gitignores": "Python",
              "license": "MIT",
              "readme": "Default"
            }' \
            "$GITEA_URL/api/v1/user/repos"
          
          echo "✅ Repository created successfully"
          
          # Clone, add files, and push
          git config --global user.email "cicd@xuperson.org"
          git config --global user.name "CI/CD Bot"
          
          git clone "$GITEA_URL/$GITEA_ADMIN_USER/$REPO_NAME.git" /tmp/repo
          cd /tmp/repo
          
          # Create the application files
          echo "📂 Adding application files..."
          
          cat > main.py << 'EOF'
          # Placeholder - Upload actual files from GitHub manually
          # Source: https://github.com/ALTIbaba/claude-code-openai-wrapper
          
          from fastapi import FastAPI
          
          app = FastAPI(title="Claude Code OpenAI Wrapper - Placeholder")
          
          @app.get("/")
          def read_root():
              return {"message": "Upload actual source code from GitHub"}
          
          @app.get("/health")
          def health():
              return {"status": "healthy"}
          
          if __name__ == "__main__":
              import uvicorn
              uvicorn.run(app, host="0.0.0.0", port=8000)
          EOF
          
          cat > pyproject.toml << 'EOF'
          [tool.poetry]
          name = "claude-code-openai-wrapper"
          version = "1.0.0"
          description = "OpenAI API-compatible wrapper for Claude Code"
          authors = ["Richard Atkinson <richardatk01@gmail.com>"]
          readme = "README.md"
          license = "MIT"
          
          [tool.poetry.dependencies]
          python = "^3.10"
          fastapi = "^0.115.0"
          uvicorn = {extras = ["standard"], version = "^0.32.0"}
          pydantic = "^2.10.0"
          python-dotenv = "^1.0.1"
          httpx = "^0.27.2"
          sse-starlette = "^2.1.3"
          python-multipart = "^0.0.12"
          claude-code-sdk = "^0.0.14"
          
          [build-system]
          requires = ["poetry-core"]
          build-backend = "poetry.core.masonry.api"
          EOF
          
          cat > Dockerfile << 'EOF'
          FROM python:3.10-slim
          
          WORKDIR /app
          
          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              curl \
              git \
              && rm -rf /var/lib/apt/lists/*
          
          # Install Claude Code CLI
          RUN curl -fsSL https://claude.ai/download/claude-code/linux | sh
          
          # Copy requirements
          COPY pyproject.toml ./
          
          # Install poetry and dependencies
          RUN pip install poetry && \
              poetry config virtualenvs.create false && \
              poetry install --only=main
          
          # Copy application code
          COPY *.py ./
          
          # Set environment variables
          ENV PORT=8000
          ENV PYTHONPATH=/app
          
          # Expose port
          EXPOSE 8000
          
          # Run the application
          CMD ["python", "main.py"]
          EOF
          
          # Create CI/CD workflow
          mkdir -p .gitea/workflows
          cat > .gitea/workflows/buildkit-ci.yml << 'EOF'
          name: Claude Code Wrapper BuildKit CI
          
          on:
            push:
              branches: [ main, master ]
            pull_request:
              branches: [ main, master ]
          
          jobs:
            build:
              runs-on: ubuntu-latest
          
              steps:
              - name: Build and push with buildctl
                run: |
                  echo "🚀 Claude Code Wrapper CI/CD Pipeline"
                  # Full CI/CD script will be applied via ConfigMap
          EOF
          
          git add .
          git commit -m "Initial Claude Code Wrapper setup with CI/CD

          Source: https://github.com/ALTIbaba/claude-code-openai-wrapper
          
          Next steps:
          1. Upload actual Python files from GitHub repo
          2. CI/CD will automatically build and deploy"
          git push origin main
          
          echo "✅ Repository setup completed!"