---
apiVersion: v1
kind: ConfigMap
metadata:
  name: portfolio-cicd-workflow
  namespace: gitea
  labels:
    app.kubernetes.io/name: portfolio-app
    app.kubernetes.io/component: cicd-workflow
    app.kubernetes.io/managed-by: flux
data:
  .gitea-workflow.yml: |
    name: Build and Push WordPress + Avada with BuildKit
    on:
      push:
        branches: [main, master]

    jobs:
      build:
        runs-on: ubuntu-latest
        steps:
        - name: Build and push WordPress + Avada with buildctl
          run: |
            set -e

            echo "🚀 Starting WordPress + Avada build with BuildKit"

            # Configuration
            IMAGE_BASE="portfolio-app"
            REGISTRY_URL="git.xuperson.org"
            GITEA_URL="http://gitea-http.gitea.svc.cluster.local:3000"
            BUILDKIT_HOST="tcp://buildkit.buildkit.svc.cluster.local:1234"

            # Get commit SHA for tagging
            COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            IMAGE_TAG="main-${COMMIT_SHA}"
            FULL_IMAGE="${REGISTRY_URL}/helloroot/${IMAGE_BASE}:${IMAGE_TAG}"

            echo "📦 Building image: ${FULL_IMAGE}"
            echo "🏗️  Using BuildKit: ${BUILDKIT_HOST}"

            # Test BuildKit connectivity
            echo "🔍 Testing BuildKit connectivity..."
            buildctl --addr ${BUILDKIT_HOST} debug workers || {
                echo "❌ BuildKit connection failed"
                exit 1
            }

            # Get Gitea credentials from secrets
            echo "🔑 Getting Gitea admin credentials..."
            ADMIN_USER="${{ secrets.GITEA_ADMIN_USERNAME }}"
            ADMIN_PASS="${{ secrets.GITEA_ADMIN_PASSWORD }}"

            if [ -z "$ADMIN_USER" ] || [ -z "$ADMIN_PASS" ]; then
                echo "❌ Missing Gitea admin credentials"
                exit 1
            fi

            # Create Dockerfile with Avada theme content
            echo "📝 Preparing build context with Avada theme..."

            # Copy wp-content from projects/avada-portfolio
            mkdir -p build-context/wp-content

            # Note: In real deployment, this would copy from the actual source
            # For now, we'll create a minimal structure
            mkdir -p build-context/wp-content/themes/Avada
            mkdir -p build-context/wp-content/plugins
            mkdir -p build-context/wp-content/uploads

            # Create minimal Avada theme structure (placeholder)
            cat > build-context/wp-content/themes/Avada/style.css << 'EOF'
            /*
            Theme Name: Avada
            Description: Premium WordPress theme
            Version: 7.11.0
            */
            EOF

            cat > build-context/wp-content/themes/Avada/index.php << 'EOF'
            <?php
            // Avada theme index file
            get_header();
            ?>
            <div class="main-content">
                <h1>Avada Portfolio</h1>
                <p>Welcome to the Avada-powered portfolio site!</p>
            </div>
            <?php
            get_footer();
            ?>
            EOF

            # Build with BuildKit
            echo "🏗️  Building WordPress + Avada image..."
            buildctl --addr ${BUILDKIT_HOST} build \
                --frontend dockerfile.v0 \
                --local context=build-context \
                --local dockerfile=. \
                --output type=image,name=${FULL_IMAGE},push=true,registry.insecure=true \
                --export-cache type=registry,ref=${REGISTRY_URL}/helloroot/${IMAGE_BASE}:cache \
                --import-cache type=registry,ref=${REGISTRY_URL}/helloroot/${IMAGE_BASE}:cache \
                --metadata-file metadata.json \
                --opt build-arg:BUILDKIT_INLINE_CACHE=1 \
                --opt build-arg:BUILD_REF=${COMMIT_SHA} \
                --opt build-arg:BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ) || {
                echo "❌ BuildKit build failed"
                exit 1
            }

            echo "✅ Build completed successfully!"
            echo "📋 Build details:"
            echo "   - Image: ${FULL_IMAGE}"
            echo "   - Commit: ${COMMIT_SHA}"
            echo "   - Registry: ${REGISTRY_URL}"

            # Verify image was pushed
            echo "🔍 Verifying image push..."
            if buildctl --addr ${BUILDKIT_HOST} imagetools inspect ${FULL_IMAGE} --raw > /dev/null 2>&1; then
                echo "✅ Image verification successful"
            else
                echo "⚠️  Image verification failed, but build completed"
            fi

            echo "🎉 WordPress + Avada CI/CD pipeline completed!"
            echo "🔄 Flux will automatically detect and deploy this image"

  build-context-setup.sh: |
    #!/bin/bash
    set -e

    echo "📦 Setting up WordPress + Avada build context..."

    # Create directory structure
    mkdir -p build-context/wp-content/{themes,plugins,uploads}

    # Copy Avada theme (this would copy from actual source in real setup)
    # For demo, create minimal structure
    mkdir -p build-context/wp-content/themes/Avada

    # Copy custom wp-config
    cp wp-config-docker.php build-context/

    # Set permissions
    chmod -R 755 build-context/wp-content

    echo "✅ Build context ready"