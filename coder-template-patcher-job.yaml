apiVersion: v1
kind: ConfigMap
metadata:
  name: coder-template-patcher-script
  namespace: coder
data:
  patch-template.sh: |
    #\!/bin/bash
    set -e
    
    # Wait for Coder to be ready
    echo "‚è≥ Waiting for Coder to be ready..."
    until curl -sf "$CODER_URL/api/v2/buildinfo" > /dev/null; do
      echo "Waiting for Coder API..."
      sleep 5
    done
    echo "‚úÖ Coder API is ready"
    
    # Get admin token from Kubernetes secret
    TOKEN=$(cat /var/secrets/coder-admin-api-token/token)
    TEMPLATE_ID="${TEMPLATE_ID:-4ae7450e-5805-44a7-98ae-58152fbddfd4}"
    
    echo "üîß Auto-patching Coder template: $TEMPLATE_ID"
    
    # Get current template
    TEMPLATE_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" "$CODER_URL/api/v2/templates/$TEMPLATE_ID")
    CURRENT_VERSION=$(echo "$TEMPLATE_RESPONSE" | jq -r '.active_version_id // empty')
    
    if [ -z "$CURRENT_VERSION" ]; then
      echo "‚ùå Template not found or API error"
      exit 1
    fi
    
    # Get template files
    VERSION_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" "$CODER_URL/api/v2/templateversions/$CURRENT_VERSION")
    FILE_ID=$(echo "$VERSION_RESPONSE" | jq -r '.job.file_id // empty')
    
    # Download and extract template
    curl -s -H "Authorization: Bearer $TOKEN" "$CODER_URL/api/v2/files/$FILE_ID" > template.tar.gz
    tar -xzf template.tar.gz
    
    # Check if already patched
    if grep -q "ENVBUILDER_GIT_USERNAME.*github" main.tf; then
      echo "‚úÖ Template already has GitHub auth - skipping"
      exit 0
    fi
    
    echo "üî® Applying GitHub auth patch..."
    
    # Apply the two critical lines
    # 1. External auth data source
    sed -i '/data "coder_workspace_owner" "me" {}/a\\n# External authentication for GitHub\ndata "coder_external_auth" "github" {\n  id = "github"\n  optional = true\n}' main.tf
    
    # 2. Environment variable  
    sed -i 's|"CODER_AGENT_URL" : replace(data\.coder_workspace\.me\.access_url, "/localhost\\|127\\\\\.0\\\\\.0\\\\\.1/", "host\.docker\.internal"),|"CODER_AGENT_URL" : replace(data.coder_workspace.me.access_url, "/localhost\\|127\\\\.0\\\\.0\\\\.1/", "host.docker.internal"),\n    "ENVBUILDER_GIT_USERNAME" : data.coder_external_auth.github.access_token,|' main.tf
    
    # Verify patch applied
    if \! grep -q "ENVBUILDER_GIT_USERNAME" main.tf || \! grep -q "coder_external_auth.*github" main.tf; then
      echo "‚ùå Patch verification failed"
      exit 1
    fi
    
    # Upload patched template
    tar -czf patched.tar.gz main.tf README.md
    FILE_HASH=$(curl -s -X POST "$CODER_URL/api/v2/files" \
      -H "Authorization: Bearer $TOKEN" \
      -H "Content-Type: application/x-tar" \
      --data-binary @patched.tar.gz | jq -r '.hash')
    
    # Create new version
    VERSION_ID=$(curl -s -X POST "$CODER_URL/api/v2/templates/$TEMPLATE_ID/versions" \
      -H "Authorization: Bearer $TOKEN" \
      -H "Content-Type: application/json" \
      -d "{\"name\": \"auto-github-$(date +%s)\", \"message\": \"Auto-patch GitHub auth\", \"file_id\": \"$FILE_HASH\"}" | jq -r '.id')
    
    if [ "$VERSION_ID" = "null" ] || [ -z "$VERSION_ID" ]; then
      echo "‚ùå Template version creation failed"
      exit 1
    fi
    
    # Wait for build and activate
    echo "‚è≥ Waiting for template build..."
    for i in {1..60}; do
      STATUS=$(curl -s -H "Authorization: Bearer $TOKEN" "$CODER_URL/api/v2/templateversions/$VERSION_ID" | jq -r '.job.status')
      if [ "$STATUS" = "succeeded" ]; then
        curl -X PATCH "$CODER_URL/api/v2/templates/$TEMPLATE_ID" \
          -H "Authorization: Bearer $TOKEN" \
          -H "Content-Type: application/json" \
          -d "{\"active_version_id\": \"$VERSION_ID\"}" > /dev/null
        echo "üéâ Template auto-patched with GitHub authentication\!"
        exit 0
      elif [ "$STATUS" = "failed" ]; then
        echo "‚ùå Template build failed"
        exit 1
      fi
      sleep 2
    done
    echo "‚è∞ Build timeout"
    exit 1

---
apiVersion: batch/v1
kind: Job
metadata:
  name: coder-template-patcher
  namespace: coder
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: template-patcher
        image: alpine/curl:latest
        command: ["/bin/sh", "/scripts/patch-template.sh"]
        env:
        - name: CODER_URL
          value: "https://coder.xuperson.org"
        - name: TEMPLATE_ID
          value: "4ae7450e-5805-44a7-98ae-58152fbddfd4"
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
        - name: admin-token
          mountPath: /var/secrets/coder-admin-api-token
          readOnly: true
      volumes:
      - name: script-volume
        configMap:
          name: coder-template-patcher-script
          defaultMode: 0755
      - name: admin-token
        secret:
          secretName: coder-admin-api-token
