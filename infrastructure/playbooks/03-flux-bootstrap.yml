---
# Enhanced Flux Bootstrap with Autonomous Infisical Integration for Disaster Recovery
- name: Bootstrap Flux CD with Autonomous Infisical Service Token Setup
  hosts: k3s_control[0]
  gather_facts: true
  vars_files:
    - "../config/group_vars.yml"
  vars:
    kubeconfig_path: "{{ playbook_dir }}/../config/kubeconfig.yaml"
    flux_version: "v2.4.0"
    cloudflare_namespace: "cloudflare"
    infisical_operator_namespace: "infisical-operator"

  tasks:
    # ========================================
    # Phase 1: Fetch Required Secrets from Infisical
    # ========================================
    - name: Fetch GitHub configuration from Infisical
      ansible.builtin.shell: |
        infisical secrets get {{ item.key }} --env=prod --plain --silent
      register: infisical_secrets_raw
      loop:
        - { key: "GITHUB_OWNER", var: "github_owner_result" }
        - { key: "GITHUB_REPO", var: "github_repo_result" }  
        - { key: "GITHUB_TOKEN", var: "github_token_result" }
        - { key: "INFISICAL_SERVICE_TOKEN", var: "infisical_token_result" }
      delegate_to: localhost
      become: false
      changed_when: false
      
    - name: Set secrets as facts
      ansible.builtin.set_fact:
        github_owner: "{{ infisical_secrets_raw.results[0].stdout }}"
        github_repo: "{{ infisical_secrets_raw.results[1].stdout }}"
        github_token: "{{ infisical_secrets_raw.results[2].stdout }}"
        infisical_service_token: "{{ infisical_secrets_raw.results[3].stdout }}"
        
    - name: Verify all required secrets are available
      ansible.builtin.debug:
        msg: |
          🔐 Secrets fetched from Infisical:
          - GitHub Owner: {{ github_owner }}
          - GitHub Repository: {{ github_repo }}
          - GitHub Token: [REDACTED {{ github_token[:8] }}...]
          - Infisical Service Token: [REDACTED {{ infisical_service_token[:8] }}...]

    # ========================================
    # Phase 2: Flux CLI Setup
    # ========================================
    - name: Set KUBECONFIG environment
      ansible.builtin.set_fact:
        kubeconfig_env:
          KUBECONFIG: "{{ kubeconfig_path }}"
      delegate_to: localhost
      become: false

    - name: Check if Flux CLI is installed
      ansible.builtin.shell: which flux
      register: flux_installed
      failed_when: false
      changed_when: false
      delegate_to: localhost
      become: false

    - name: Install Flux CLI if needed
      ansible.builtin.shell: |
        curl -s https://fluxcd.io/install.sh | bash
        sudo mv flux /usr/local/bin/
      when: flux_installed.rc != 0
      delegate_to: localhost
      become: false

    # ========================================
    # Phase 3: Bootstrap or Restore Flux
    # ========================================
    - name: Check if Flux is already bootstrapped
      ansible.builtin.shell: kubectl get namespace flux-system
      environment: "{{ kubeconfig_env }}"
      register: flux_namespace_check
      failed_when: false
      changed_when: false
      delegate_to: localhost
      become: false

    - name: Check if FluxCD manifests exist in repository
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/../../../clusters/labinfra/flux-system/gotk-components.yaml"
      register: flux_manifests_exist
      delegate_to: localhost
      become: false

    - name: Apply existing FluxCD manifests if available
      ansible.builtin.shell: |
        kubectl apply -k {{ playbook_dir }}/../../../clusters/labinfra/flux-system
      environment: "{{ kubeconfig_env }}"
      when: 
        - flux_namespace_check.rc != 0
        - flux_manifests_exist.stat.exists
      delegate_to: localhost
      become: false
      register: flux_apply_result

    - name: Bootstrap Flux CD (if manifests don't exist)
      ansible.builtin.shell: |
        flux bootstrap github \
          --owner="{{ github_owner }}" \
          --repository="{{ github_repo }}" \
          --branch=master \
          --path=./clusters/labinfra \
          --personal \
          --token-auth
      environment: 
        GITHUB_TOKEN: "{{ github_token }}"
        KUBECONFIG: "{{ kubeconfig_path }}"
      when: 
        - flux_namespace_check.rc != 0
        - not flux_manifests_exist.stat.exists
      delegate_to: localhost
      become: false
      register: flux_bootstrap_result

    - name: Create GitHub token secret for existing manifests
      ansible.builtin.shell: |
        kubectl create secret generic flux-system \
          --from-literal=username=git \
          --from-literal=password="{{ github_token }}" \
          --namespace=flux-system \
          --dry-run=client -o yaml | kubectl apply -f -
      environment: "{{ kubeconfig_env }}"
      when: flux_apply_result is defined and flux_apply_result.changed
      delegate_to: localhost
      become: false

    # ========================================
    # Phase 4: Autonomous Infisical Service Token Setup
    # ========================================
    - name: Create required namespaces for Infisical integration
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
      loop:
        - "{{ cloudflare_namespace }}"
        - "{{ infisical_operator_namespace }}"
      delegate_to: localhost
      become: false
        
    - name: Create shared Infisical service token secret in infisical-operator-system
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: infisical-service-token
            namespace: "{{ infisical_operator_namespace }}"
            labels:
              app.kubernetes.io/name: infisical
              app.kubernetes.io/component: service-token
              app.kubernetes.io/managed-by: ansible
            annotations:
              ansible.managed: "true"
              infisical.com/source: "autonomous-disaster-recovery"
              infisical.com/created-by: "flux-bootstrap-playbook"
          type: Opaque
          data:
            # Primary key for most integrations (CloudFlare pattern)
            infisicalToken: "{{ infisical_service_token | b64encode }}"
            # Secondary key for some integrations that expect 'serviceToken'
            serviceToken: "{{ infisical_service_token | b64encode }}"
            # Legacy key for backwards compatibility
            token: "{{ infisical_service_token | b64encode }}"
      delegate_to: localhost
      become: false
            
    - name: Create legacy Infisical service token secret in cloudflare namespace (for backwards compatibility)
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: infisical-service-token
            namespace: "{{ cloudflare_namespace }}"
            labels:
              app.kubernetes.io/name: infisical
              app.kubernetes.io/component: service-token
              app.kubernetes.io/managed-by: ansible
            annotations:
              ansible.managed: "true"
              infisical.com/source: "backwards-compatibility"
              infisical.com/created-by: "flux-bootstrap-playbook"
          type: Opaque
          data:
            infisicalToken: "{{ infisical_service_token | b64encode }}"
      delegate_to: localhost
      become: false

    # ========================================
    # Phase 5: Wait for Flux and Verify Setup
    # ========================================
    - name: Wait for Flux system to be ready
      ansible.builtin.shell: kubectl wait --for=condition=ready pod -l app=source-controller -n flux-system --timeout=300s
      environment: "{{ kubeconfig_env }}"
      delegate_to: localhost
      become: false

    - name: Verify Flux installation
      ansible.builtin.shell: flux get sources git
      environment: "{{ kubeconfig_env }}"
      register: flux_sources
      delegate_to: localhost
      become: false

    - name: Wait for Infisical operator to be deployed (if exists)
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: infisical-secrets-operator-controller-manager
        namespace: "{{ infisical_operator_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
      delegate_to: localhost
      become: false
      ignore_errors: true # In case operator hasn't been deployed yet

    # ========================================
    # Phase 6: Validation and Status Report
    # ========================================
    - name: Verify Infisical service token secrets were created
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: infisical-service-token
        namespace: "{{ item }}"
        kubeconfig: "{{ kubeconfig_path }}"
      loop:
        - "{{ cloudflare_namespace }}"
        - "{{ infisical_operator_namespace }}"
      register: secret_verification
      delegate_to: localhost
      become: false
      
    - name: Display secret verification results
      ansible.builtin.debug:
        msg: "✅ Infisical service token exists in {{ item.item }}: {{ item.resources | length > 0 }}"
      loop: "{{ secret_verification.results }}"

    - name: Test Infisical integration by listing secrets
      ansible.builtin.shell: |
        infisical secrets --env=prod --format=table
      register: infisical_test
      delegate_to: localhost
      become: false
      ignore_errors: true

    - name: Display comprehensive success message
      ansible.builtin.debug:
        msg: |
          🎉 AUTONOMOUS FLUX + INFISICAL DISASTER RECOVERY COMPLETED! 🎉
          
          📊 Infrastructure Status:
          ✅ Flux CD: {{ 'Bootstrapped' if flux_bootstrap_result is defined else 'Restored from existing manifests' }}
          ✅ GitHub Repository: {{ github_owner }}/{{ github_repo }} connected
          ✅ GitOps Path: ./clusters/labinfra monitored
          ✅ Infisical Service Token: Deployed to {{ infisical_operator_namespace }} & {{ cloudflare_namespace }}
          ✅ Autonomous Recovery: Ready for disaster scenarios
          
          🔐 Secret Management:
          - Service Token: Available in both namespaces for compatibility
          - Multi-Key Support: infisicalToken, serviceToken, token keys
          - Cross-Namespace Access: Applications can reference shared token
          
          🚀 GitOps Workflow Ready:
          - Core Infrastructure: Will auto-deploy via Flux
          - Applications: Will auto-deploy via Flux
          - Secrets: Will auto-sync via Infisical Operator
          
          📁 Directory Structure:
          ./clusters/labinfra/
          ├── flux-system/           (✅ Flux managed)
          ├── core/                  (✅ Auto-deploys: Longhorn, MetalLB, Infisical, etc.)
          └── apps/                  (✅ Auto-deploys: Applications with Infisical secrets)
          
          🔄 Disaster Recovery Benefits:
          1. Zero-Touch Recovery: Run this playbook = Full cluster restoration
          2. Secret Autonomy: No manual secret creation needed
          3. GitOps Consistency: Everything managed via Git + Infisical
          4. Multi-App Support: Shared service token for all applications
          
          ⚡ Next Steps:
          1. Commit any new manifests: git add . && git commit -m "Update GitOps"
          2. Monitor deployments: flux get all -A
          3. Verify Infisical sync: kubectl get infisicalsecrets -A
          
          Ready for autonomous operations! 🚀