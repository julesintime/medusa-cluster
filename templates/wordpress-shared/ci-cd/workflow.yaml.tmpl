name: Build and Deploy {{.NAMESPACE | title}} WordPress
on:
  push:
    branches: [main, master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Build and push {{.NAMESPACE}} WordPress with BuildKit
      run: |
        set -e

        echo "üöÄ Starting {{.NAMESPACE}} WordPress build with BuildKit"

        # Configuration
        IMAGE_BASE="{{.APP_NAME}}"
        NAMESPACE="{{.NAMESPACE}}"
        DOMAIN="{{.DOMAIN}}"
        TIER="{{.TIER}}"
        REGISTRY_URL="git.xuperson.org"
        GITEA_URL="http://gitea-http.gitea.svc.cluster.local:3000"
        BUILDKIT_HOST="tcp://buildkit.buildkit.svc.cluster.local:1234"

        # Get commit SHA for tagging
        COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
        IMAGE_TAG="main-${COMMIT_SHA}"
        FULL_IMAGE="${REGISTRY_URL}/${NAMESPACE}/${IMAGE_BASE}:${IMAGE_TAG}"

        echo "üì¶ Building image: ${FULL_IMAGE}"
        echo "üèóÔ∏è  Using BuildKit: ${BUILDKIT_HOST}"
        echo "üéØ Target: ${DOMAIN} (${TIER} tier)"

        # Test BuildKit connectivity
        echo "üîç Testing BuildKit connectivity..."
        buildctl --addr ${BUILDKIT_HOST} debug workers || {
            echo "‚ùå BuildKit connection failed"
            exit 1
        }

        # Get Gitea credentials from secrets
        echo "üîë Getting Gitea admin credentials..."
        ADMIN_USER="${{ secrets.GITEA_ADMIN_USERNAME }}"
        ADMIN_PASS="${{ secrets.GITEA_ADMIN_PASSWORD }}"

        if [ -z "$ADMIN_USER" ] || [ -z "$ADMIN_PASS" ]; then
            echo "‚ùå Missing Gitea admin credentials"
            exit 1
        fi

        # Create WordPress content structure
        echo "üìù Preparing WordPress build context..."
        mkdir -p wp-content/{themes,plugins,uploads}

        # Create basic WordPress theme or copy existing
        if [ ! -d "wp-content/themes/{{.THEME | default "twentytwentyfour"}}" ]; then
            echo "Creating default theme structure..."
            mkdir -p wp-content/themes/{{.THEME | default "twentytwentyfour"}}
            cat > wp-content/themes/{{.THEME | default "twentytwentyfour"}}/style.css << 'THEME_EOF'
/*
Theme Name: {{.NAMESPACE | title}} Theme
Description: Custom WordPress theme for {{.DOMAIN}}
Version: 1.0.0
*/
THEME_EOF

            cat > wp-content/themes/{{.THEME | default "twentytwentyfour"}}/index.php << 'THEME_EOF'
<?php get_header(); ?>
<div class="main-content">
    <h1>Welcome to {{.NAMESPACE | title}}</h1>
    <p>Your {{.TIER}} tier WordPress site is running!</p>
    <p>Domain: {{.DOMAIN}}</p>
    <p>Build: <?php echo getenv('BUILD_REF') ?: 'development'; ?></p>
</div>
<?php get_footer(); ?>
THEME_EOF
        fi

        # Create custom wp-config if needed
        if [ ! -f "wp-config-custom.php" ]; then
            cat > wp-config-custom.php << 'CONFIG_EOF'
<?php
// Custom WordPress configuration for {{.NAMESPACE}}
define('WP_DEBUG', false);
define('WP_DEBUG_LOG', false);
define('WP_DEBUG_DISPLAY', false);

// Site-specific optimizations
define('WP_MEMORY_LIMIT', '{{.WP_MEMORY_LIMIT}}');
define('DISABLE_WP_CRON', true);

// Security
define('DISALLOW_FILE_EDIT', true);
define('FORCE_SSL_ADMIN', true);
CONFIG_EOF
        fi

        # Build with BuildKit
        echo "üèóÔ∏è  Building WordPress image for {{.DOMAIN}}..."
        buildctl --addr ${BUILDKIT_HOST} build \
            --frontend dockerfile.v0 \
            --local context=. \
            --local dockerfile=. \
            --output type=image,name=${FULL_IMAGE},push=true,registry.insecure=true \
            --export-cache type=registry,ref=${REGISTRY_URL}/${NAMESPACE}/${IMAGE_BASE}:cache \
            --import-cache type=registry,ref=${REGISTRY_URL}/${NAMESPACE}/${IMAGE_BASE}:cache \
            --opt build-arg:BUILD_REF=${COMMIT_SHA} \
            --opt build-arg:BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
            --opt build-arg:BUILD_VERSION=${IMAGE_TAG} \
            --metadata-file metadata.json || {
            echo "‚ùå BuildKit build failed"
            exit 1
        }

        echo "‚úÖ {{.NAMESPACE | title}} WordPress build completed!"
        echo "üìã Build details:"
        echo "   - Image: ${FULL_IMAGE}"
        echo "   - Commit: ${COMMIT_SHA}"
        echo "   - Domain: ${DOMAIN}"
        echo "   - Tier: ${TIER}"

        # Verify image was pushed
        echo "üîç Verifying image push..."
        if buildctl --addr ${BUILDKIT_HOST} imagetools inspect ${FULL_IMAGE} --raw > /dev/null 2>&1; then
            echo "‚úÖ Image verification successful"
        else
            echo "‚ö†Ô∏è  Image verification failed, but build completed"
        fi

        echo "üéâ {{.NAMESPACE | title}} CI/CD pipeline completed!"
        echo "üîÑ Flux will automatically detect and deploy this image to {{.DOMAIN}}"