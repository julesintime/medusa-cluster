---
apiVersion: v1
kind: ConfigMap
metadata:
  name: claude-code-wrapper-app-code
  namespace: gitea
  labels:
    app.kubernetes.io/name: claude-code-wrapper
    app.kubernetes.io/component: application-code
    app.kubernetes.io/managed-by: flux
data:
  pyproject.toml: |
    [tool.poetry]
    name = "claude-code-openai-wrapper"
    version = "1.0.0"
    description = "OpenAI API-compatible wrapper for Claude Code"
    authors = ["Richard Atkinson <richardatk01@gmail.com>"]
    readme = "README.md"
    license = "MIT"
    packages = [{include = "*.py"}]

    [tool.poetry.dependencies]
    python = "^3.10"
    fastapi = "^0.115.0"
    uvicorn = {extras = ["standard"], version = "^0.32.0"}
    pydantic = "^2.10.0"
    python-dotenv = "^1.0.1"
    httpx = "^0.27.2"
    sse-starlette = "^2.1.3"
    python-multipart = "^0.0.12"
    claude-code-sdk = "^0.0.14"

    [tool.poetry.group.dev.dependencies]
    black = "^24.0.0"
    pytest = "^8.0.0"
    pytest-asyncio = "^0.23.0"
    requests = "^2.32.0"
    openai = "^1.0.0"

    [build-system]
    requires = ["poetry-core"]
    build-backend = "poetry.core.masonry.api"

    [tool.black]
    line-length = 100
    target-version = ['py310']

    [tool.poetry.scripts]
    claude-wrapper = "main:run_server"
  
  poetry.lock: |
    # This will be generated during build
    
  Dockerfile: |
    FROM python:3.10-slim

    WORKDIR /app

    # Install system dependencies
    RUN apt-get update && apt-get install -y \
        curl \
        git \
        && rm -rf /var/lib/apt/lists/*

    # Install Claude Code CLI
    RUN curl -fsSL https://claude.ai/download/claude-code/linux | sh

    # Copy requirements
    COPY pyproject.toml ./

    # Install poetry and dependencies (without lock file initially)
    RUN pip install poetry && \
        poetry config virtualenvs.create false && \
        poetry install --only=main

    # Copy application code
    COPY *.py ./

    # Set environment variables
    ENV PORT=8000
    ENV PYTHONPATH=/app

    # Health check
    HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
        CMD curl -f http://localhost:8000/health || exit 1

    # Expose port
    EXPOSE 8000

    # Run the application
    CMD ["python", "main.py"]

  README.md: |
    # Claude Code OpenAI Wrapper

    OpenAI API-compatible wrapper for Claude Code, providing familiar OpenAI endpoints.

    ## Features

    - 🚀 Gitea Actions CI/CD pipeline
    - 🏗️ BuildKit remote building
    - 📦 Containerized Python FastAPI application
    - ⚡ Automatic build triggers
    - 🔌 OpenAI API compatibility

    ## Local Development

    ```bash
    poetry install
    poetry run python main.py
    ```

    ## CI/CD Pipeline

    The pipeline automatically:
    1. Tests BuildKit connectivity
    2. Builds Docker image with BuildKit
    3. Sets build metadata and versioning

    ## Architecture

    - **CI**: Gitea Actions
    - **Build**: Remote BuildKit service
    - **Runtime**: Python 3.10 with FastAPI
    - **Deployment**: GitOps with Flux

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: claude-code-wrapper-cicd-workflow
  namespace: gitea
  labels:
    app.kubernetes.io/name: claude-code-wrapper
    app.kubernetes.io/component: cicd-workflow
    app.kubernetes.io/managed-by: flux
data:
  buildkit-ci.yml: |
    name: Claude Code Wrapper BuildKit CI

    on:
      push:
        branches: [ main, master ]
      pull_request:
        branches: [ main, master ]

    jobs:
      build:
        runs-on: ubuntu-latest

        steps:
        - name: Build and push with buildctl
          run: |
            set -e
            
            echo "📦 Setting up workspace..."
            echo "📁 Initial working directory: $(pwd)"
            
            # Clone the repository to current directory
            echo "🔄 Cloning repository..."
            echo "Server URL: ${{ gitea.server_url }}"
            echo "Repository: ${{ gitea.repository }}"
            echo "SHA: ${{ gitea.sha }}"
            REPO_URL="${{ gitea.server_url }}/${{ gitea.repository }}.git"
            echo "Full URL: $REPO_URL"
            git clone "$REPO_URL" repo
            cd repo
            git checkout "${{ gitea.sha }}"
            
            echo "📁 Repository directory: $(pwd)"
            echo "📋 Repository contents:"
            ls -la
            
            # Get commit info for tagging
            COMMIT_SHA=$(git rev-parse --short HEAD)
            BRANCH_NAME=${{ gitea.ref_name }}
            IMAGE_BASE="gitea-http.gitea.svc.cluster.local:3000/helloroot/claude-code-wrapper"
            
            # Build tags
            if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
              TAGS="$IMAGE_BASE:latest,$IMAGE_BASE:$BRANCH_NAME-$COMMIT_SHA"
            else
              TAGS="$IMAGE_BASE:$BRANCH_NAME-$COMMIT_SHA"
            fi
            
            echo "🔨 Building image with tags: $TAGS"
            echo "🔍 Checking for Dockerfile..."
            if [ -f "Dockerfile" ]; then
              echo "✅ Found Dockerfile"
              cat Dockerfile
            else
              echo "❌ No Dockerfile found"
              exit 1
            fi
            
            # Test buildctl connectivity
            echo "🔗 Testing BuildKit connection..."
            buildctl --addr $BUILDKIT_HOST debug workers
            
            # Setup BuildKit authentication - using known working credentials
            echo "🔐 Setting up BuildKit authentication..."
            echo "Registry: gitea-http.gitea.svc.cluster.local:3000"
            
            # Use admin credentials from Infisical-managed secrets
            ADMIN_USER="${{ secrets.ADMIN_USER }}"
            ADMIN_PASS="${{ secrets.ADMIN_PASS }}"
            
            echo "Configuring BuildKit authentication for user: $ADMIN_USER"
            # Create Docker auth config for BuildKit to use
            mkdir -p ~/.docker
            AUTH_STRING=$(echo -n "$ADMIN_USER:$ADMIN_PASS" | base64)
            cat > ~/.docker/config.json << EOF
            {
              "auths": {
                "gitea-http.gitea.svc.cluster.local:3000": {
                  "auth": "$AUTH_STRING"
                }
              }
            }
            EOF
            echo "✅ BuildKit authentication configured"
            
            # Verify auth config
            echo "Auth config created:"
            cat ~/.docker/config.json
            
            # Build and push with buildctl (insecure registry)
            echo "🏗️ Starting BuildKit build..."
            echo "Building with tags: $TAGS"
            
            # Split tags and build for each one
            for TAG in $(echo $TAGS | tr "," "\n"); do
              echo "Building and pushing tag: $TAG"
              buildctl --addr $BUILDKIT_HOST build \
                --frontend dockerfile.v0 \
                --local context=. \
                --local dockerfile=. \
                --output type=image,name="$TAG",push=true,registry.insecure=true \
                --export-cache type=registry,ref=$IMAGE_BASE:cache,registry.insecure=true \
                --import-cache type=registry,ref=$IMAGE_BASE:cache,registry.insecure=true
            done
            
            echo "✅ Build completed successfully!"
            echo "📋 Image tags: $TAGS"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: claude-code-wrapper-repo-init
  namespace: gitea
  labels:
    app.kubernetes.io/name: claude-code-wrapper
    app.kubernetes.io/component: repo-init
    app.kubernetes.io/managed-by: flux
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: repo-init
        image: alpine/git:latest
        env:
        - name: GITEA_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: gitea-admin-credentials
              key: username
        - name: GITEA_ADMIN_PASS
          valueFrom:
            secretKeyRef:
              name: gitea-admin-credentials
              key: password
        - name: REPO_NAME
          value: "claude-code-wrapper"
        - name: GITEA_URL
          value: "http://gitea-http.gitea.svc.cluster.local:3000"
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e
          apk add --no-cache curl jq
          
          echo "🔧 Setting up Claude Code Wrapper repository..."
          
          # Create repository in Gitea
          echo "📝 Creating repository: $REPO_NAME"
          curl -X POST \
            -H "Content-Type: application/json" \
            -u "$GITEA_ADMIN_USER:$GITEA_ADMIN_PASS" \
            -d '{
              "name": "'$REPO_NAME'",
              "description": "Claude Code OpenAI API Wrapper with CI/CD",
              "private": false,
              "auto_init": true,
              "gitignores": "Python",
              "license": "MIT",
              "readme": "Default"
            }' \
            "$GITEA_URL/api/v1/user/repos"
          
          echo "✅ Repository created successfully"
          
          # Clone, add files, and push
          git config --global user.email "cicd@xuperson.org"
          git config --global user.name "CI/CD Bot"
          
          git clone "$GITEA_URL/$GITEA_ADMIN_USER/$REPO_NAME.git" /tmp/repo
          cd /tmp/repo
          
          # Create the GitHub source files from ConfigMap
          echo "📂 Adding application files..."
          
          # We'll manually upload the main.py and other files from the GitHub source
          # For now, create basic structure
          cat > main.py << 'EOF'
          # Placeholder - actual content from https://github.com/ALTIbaba/claude-code-openai-wrapper
          print("Claude Code OpenAI Wrapper - See GitHub source for full implementation")
          EOF
          
          cat > pyproject.toml << 'EOF'
          [tool.poetry]
          name = "claude-code-openai-wrapper"
          version = "1.0.0"
          description = "OpenAI API-compatible wrapper for Claude Code"
          authors = ["Richard Atkinson <richardatk01@gmail.com>"]
          readme = "README.md"
          license = "MIT"
          
          [tool.poetry.dependencies]
          python = "^3.10"
          fastapi = "^0.115.0"
          uvicorn = {extras = ["standard"], version = "^0.32.0"}
          pydantic = "^2.10.0"
          python-dotenv = "^1.0.1"
          httpx = "^0.27.2"
          sse-starlette = "^2.1.3"
          python-multipart = "^0.0.12"
          claude-code-sdk = "^0.0.14"
          
          [build-system]
          requires = ["poetry-core"]
          build-backend = "poetry.core.masonry.api"
          EOF
          
          cat > Dockerfile << 'EOF'
          FROM python:3.10-slim
          
          WORKDIR /app
          
          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              curl \
              git \
              && rm -rf /var/lib/apt/lists/*
          
          # Install Claude Code CLI
          RUN curl -fsSL https://claude.ai/download/claude-code/linux | sh
          
          # Copy requirements
          COPY pyproject.toml ./
          
          # Install poetry and dependencies
          RUN pip install poetry && \
              poetry config virtualenvs.create false && \
              poetry install --only=main
          
          # Copy application code
          COPY *.py ./
          
          # Set environment variables
          ENV PORT=8000
          ENV PYTHONPATH=/app
          
          # Expose port
          EXPOSE 8000
          
          # Run the application
          CMD ["python", "main.py"]
          EOF
          
          # Create CI/CD workflow
          mkdir -p .gitea/workflows
          cat > .gitea/workflows/buildkit-ci.yml << 'EOF'
          name: Claude Code Wrapper BuildKit CI
          
          on:
            push:
              branches: [ main, master ]
            pull_request:
              branches: [ main, master ]
          
          jobs:
            build:
              runs-on: ubuntu-latest
          
              steps:
              - name: Build and push with buildctl
                run: |
                  # CI/CD script content here (same as above)
                  echo "🚀 Claude Code Wrapper CI/CD Pipeline"
          EOF
          
          git add .
          git commit -m "Initial Claude Code Wrapper setup with CI/CD"
          git push origin main
          
          echo "✅ Repository setup completed!"