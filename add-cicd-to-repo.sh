#!/bin/bash
set -e

# Get admin credentials
ADMIN_USER=$(kubectl get secret gitea-admin-secrets -n gitea -o jsonpath='{.data.username}' | base64 -d)
ADMIN_PASS=$(kubectl get secret gitea-admin-secrets -n gitea -o jsonpath='{.data.password}' | base64 -d)

echo "Adding Dockerfile and CI/CD workflow to claude-code-openai-wrapper repo..."

# Add Dockerfile
echo "Creating Dockerfile..."
curl -X POST \
  -H "Content-Type: application/json" \
  -u "$ADMIN_USER:$ADMIN_PASS" \
  -d '{
    "message": "Add Dockerfile for container builds",
    "content": "RlJPTSBweXRob246My4xMC1zbGltCgpXT1JLRElSIC9hcHAKCiMgSW5zdGFsbCBzeXN0ZW0gZGVwZW5kZW5jaWVzClJVTiBhcHQtZ2V0IHVwZGF0ZSAmJiBhcHQtZ2V0IGluc3RhbGwgLXkgXAogICAgY3VybCBcCiAgICBnaXQgXAogICAgJiYgcm0gLXJmIC92YXIvbGliL2FwdC9saXN0cy8qCgojIEluc3RhbGwgQ2xhdWRlIENvZGUgQ0xJClJVTiBjdXJsIC1mc1NMIGh0dHBzOi8vY2xhdWRlLmFpL2Rvd25sb2FkL2NsYXVkZS1jb2RlL2xpbnV4IHwgc2gKCiMgQ29weSByZXF1aXJlbWVudHMgZmlyc3QgZm9yIGJldHRlciBjYWNoaW5nCkNPUFkgcHlwcm9qZWN0LnRvbWwgcG9ldHJ5LmxvY2sgLi8KCiMgSW5zdGFsbCBwb2V0cnkgYW5kIGRlcGVuZGVuY2llcwpSVU4gcGlwIGluc3RhbGwgcG9ldHJ5ICYmIFwKICAgIHBvZXRyeSBjb25maWcgdmlydHVhbGVudnMuY3JlYXRlIGZhbHNlICYmIFwKICAgIHBvZXRyeSBpbnN0YWxsIC0tb25seT1tYWluIC0tbm8tcm9vdAoKIyBDb3B5IGFwcGxpY2F0aW9uIGNvZGUKQ09QWSAqLnB5IC4vCgojIFNldCBlbnZpcm9ubWVudCB2YXJpYWJsZXMKRU5WIFBPUlQ9ODAwMApFTlYgUFlUSE9OUEFUSD0vYXBwCgojIEV4cG9zZSBwb3J0CkVYUE9TRSA4MDAwCgojIFJ1biB0aGUgYXBwbGljYXRpb24KQ01EIFsicHl0aG9uIiwgIm1haW4ucHkiXQ=="
  }' \
  "https://git.xuperson.org/api/v1/repos/helloroot/claude-code-openai-wrapper/contents/Dockerfile"

echo "Creating CI/CD workflow directory..."
curl -X POST \
  -H "Content-Type: application/json" \
  -u "$ADMIN_USER:$ADMIN_PASS" \
  -d '{
    "message": "Add BuildKit CI/CD workflow",
    "content": "bmFtZTogQ2xhdWRlIENvZGUgV3JhcHBlciBCdWlsZEtpdCBDSQoKb246CiAgcHVzaDoKICAgIGJyYW5jaGVzOiBbIG1haW4sIG1hc3RlciBdCgpqb2JzOgogIGJ1aWxkOgogICAgcnVucy1vbjogdWJ1bnR1LWxhdGVzdAoKICAgIHN0ZXBzOgogICAgLSBuYW1lOiBCdWlsZCBhbmQgcHVzaCB3aXRoIGJ1aWxkY3RsCiAgICAgIHJ1bjogfAogICAgICAgIHNldCAtZQogICAgICAgIAogICAgICAgIGVjaG8gIvCfk6YgU2V0dGluZyB1cCB3b3Jrc3BhY2UuLi4iCiAgICAgICAgZWNobyAi8J+RgSBJbml0aWFsIHdvcmtpbmcgZGlyZWN0b3J5OiAkKHB3ZCkiCiAgICAgICAgCiAgICAgICAgIyBDbG9uZSB0aGUgcmVwb3NpdG9yeSB0byBjdXJyZW50IGRpcmVjdG9yeQogICAgICAgIGVjaG8gIvCfkYQgQ2xvbmluZyByZXBvc2l0b3J5Li4uIgogICAgICAgIGVjaG8gIlNlcnZlciBVUkw6ICR7eyBnaXRlYS5zZXJ2ZXJfdXJsIH19IgogICAgICAgIGVjaG8gIlJlcG9zaXRvcnk6ICR7eyBnaXRlYS5yZXBvc2l0b3J5IH19IgogICAgICAgIGVjaG8gIlNIQTogJHt7IGdpdGVhLnNoYSB9fSIKICAgICAgICBSRVBPX1VSTD0iJHt7IGdpdGVhLnNlcnZlcl91cmwgfX0vJHt7IGdpdGVhLnJlcG9zaXRvcnkgfX0uZ2l0IgogICAgICAgIGVjaG8gIkZ1bGwgVVJMOiAkUkVQT19VUkwiCiAgICAgICAgZ2l0IGNsb25lICIkUkVQT19VUkwiIHJlcG8KICAgICAgICBjZCByZXBvCiAgICAgICAgZ2l0IGNoZWNrb3V0ICIke3sgZ2l0ZWEuc2hhIH19IgogICAgICAgIAogICAgICAgIGVjaG8gIvCfkYEgUmVwb3NpdG9yeSBkaXJlY3Rvcnk6ICQocHdkKSIKICAgICAgICBlY2hvICLwn5GCIFJlcG9zaXRvcnkgY29udGVudHM6IgogICAgICAgIGxzIC1sYQogICAgICAgIAogICAgICAgICMgR2V0IGNvbW1pdCBpbmZvIGZvciB0YWdnaW5nCiAgICAgICAgQ09NTUlUX1NIQT0kKGdpdCByZXYtcGFyc2UgLS1zaG9ydCBIRUFEKQogICAgICAgIEJSQU5DSF9OQU1FPSQkeyBnaXRlYS5yZWZfbmFtZSB9fQogICAgICAgIElNQUdFX0JBU0U9ImdpdGVhLWh0dHAuZ2l0ZWEuc3ZjLmNsdXN0ZXIubG9jYWw6MzAwMC9oZWxsb3Jvb3QvY2xhdWRlLWNvZGUtb3BlbmFpLXdyYXBwZXIiCiAgICAgICAgCiAgICAgICAgIyBCdWlsZCB0YWdzCiAgICAgICAgaWYgWyAiJEJSQU5DSF9OQU1FIiA9ICJtYWluIiBdIHx8IFsgIiRCUkFOQ0hfTkFNRSIgPSAibWFzdGVyIiBdOyB0aGVuCiAgICAgICAgICBUQUdTPSIkSU1BR0VfQkFTRTpsYXRlc3QsJElNQUdFX0JBU0U6JEJSQU5DSF9OQU1FLSRDT01NSVRfU0hBIgogICAgICAgIGVsc2UKICAgICAgICAgIFRBR1M9IiRJTUFHRV9CQVNFOJCJCUEFOREN09fTkFNRS0kQ09NTUlUX1NIQSIKICAgICAgICBmaQogICAgICAgIAogICAgICAgIGVjaG8gIvCfkKggQnVpbGRpbmcgaW1hZ2Ugd2l0aCB0YWdzOiAkVEFHUyIKICAgICAgICBlY2hvICLwn5GNIENoZWNraW5nIGZvciBEb2NrZXJmaWxlLi4uIgogICAgICAgIGlmIFsgLWYgIkRvY2tlcmZpbGUiIF07IHRoZW4KICAgICAgICAgIGVjaG8gIuKchSBGb3VuZCBEb2NrZXJmaWxlIgogICAgICAgICAgY2F0IERvY2tlcmZpbGUKICAgICAgICBlbHNlCiAgICAgICAgICBlY2hvICLinYQgTm8gRG9ja2VyZmlsZSBmb3VuZCIKICAgICAgICAgIGV4aXQgMQogICAgICAgIGZpCiAgICAgICAgCiAgICAgICAgIyBUZXN0IGJ1aWxkY3RsIGNvbm5lY3Rpdml0eQogICAgICAgIGVjaG8gIvCfkJcgVGVzdGluZyBCdWlsZEtpdCBjb25uZWN0aW9uLi4uIgogICAgICAgIGJ1aWxkY3RsIC0tYWRkciAkQlVJTERLSVRfSE9TVCBkZWJ1ZyB3b3JrZXJzCiAgICAgICAgCiAgICAgICAgIyBTZXR1cCBCdWlsZEtpdCBhdXRoZW50aWNhdGlvbiAtIHVzaW5nIGtub3duIHdvcmtpbmcgY3JlZGVudGlhbHMKICAgICAgICBlY2hvICLwn5CQIFNldHRpbmcgdXAgQnVpbGRLaXQgYXV0aGVudGljYXRpb24uLi4iCiAgICAgICAgZWNobyAiUmVnaXN0cnk6IGdpdGVhLWh0dHAuZ2l0ZWEuc3ZjLmNsdXN0ZXIubG9jYWw6MzAwMCIKICAgICAgICAKICAgICAgICAjIFVzZSBhZG1pbiBjcmVkZW50aWFscyBmcm9tIEluZmlzaWNhbC1tYW5hZ2VkIHNlY3JldHMKICAgICAgICBBRE1JTl9VU0VSPSIke3sgc2VjcmV0cy5BRE1JTl9VU0VSIH19IgogICAgICAgIEFETUlOX1BBU1M9IiR7eyBzZWNyZXRzLkFETUlOX1BBU1MgfX0iCiAgICAgICAgCiAgICAgICAgZWNobyAiQ29uZmlndXJpbmcgQnVpbGRLaXQgYXV0aGVudGljYXRpb24gZm9yIHVzZXI6ICRBRE1JTl9VU0VSIgogICAgICAgICMgQ3JlYXRlIERvY2tlciBhdXRoIGNvbmZpZyBmb3IgQnVpbGRLaXQgdG8gdXNlCiAgICAgICAgbWtkaXIgLXAgfi8uZG9ja2VyCiAgICAgICAgQVVUSF9TVFJJTkc9JChlY2hvIC1uICIkQURNSU5fVVNFUjokQURNSU5fUEFTUyIgfCBiYXNlNjQpCiAgICAgICAgY2F0ID4gfi8uZG9ja2VyL2NvbmZpZy5qc29uIDw8IEVPRgogICAgICAgIHsKICAgICAgICAgICJhdXRocyI6IHsKICAgICAgICAgICAgImdpdGVhLWh0dHAuZ2l0ZWEuc3ZjLmNsdXN0ZXIubG9jYWw6MzAwMCI6IHsKICAgICAgICAgICAgICAiYXV0aCI6ICIkQVVUSF9TVFJJTkciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgRU9GCiAgICAgICAgZWNobyAi4pyFIEJ1aWxkS2l0IGF1dGhlbnRpY2F0aW9uIGNvbmZpZ3VyZWQiCiAgICAgICAgCiAgICAgICAgIyBWZXJpZnkgYXV0aCBjb25maWcKICAgICAgICBlY2hvICJBdXRoIGNvbmZpZyBjcmVhdGVkOiIKICAgICAgICBjYXQgfi8uZG9ja2VyL2NvbmZpZy5qc29uCiAgICAgICAgCiAgICAgICAgIyBCdWlsZCBhbmQgcHVzaCB3aXRoIGJ1aWxkY3RsIChpbnNlY3VyZSByZWdpc3RyeSkKICAgICAgICBlY2hvICLwn5GPIFN0YXJ0aW5nIEJ1aWxkS2l0IGJ1aWxkLi4uIgogICAgICAgIGVjaG8gIkJ1aWxkaW5nIHdpdGggdGFnczogJFRBR1MiCiAgICAgICAgCiAgICAgICAgIyBTcGxpdCB0YWdzIGFuZCBidWlsZCBmb3IgZWFjaCBvbmUKICAgICAgICBmb3IgVEFHIGluICQoZWNobyAkVEFHUyB8IHRyICIsIiAiXG4iKTsgZG8KICAgICAgICAgIGVjaG8gIkJ1aWxkaW5nIGFuZCBwdXNoaW5nIHRhZzogJFRBRyIKICAgICAgICAgIGJ1aWxkY3RsIC0tYWRkciAkQlVJTERLSVRfSE9TVCBidWlsZCBcCiAgICAgICAgICAgIC0tZnJvbnRlbmQgZG9ja2VyZmlsZS52MCBcCiAgICAgICAgICAgIC0tbG9jYWwgY29udGV4dD0uIFwKICAgICAgICAgICAgLS1sb2NhbCBkb2NrZXJmaWxlPS4gXAogICAgICAgICAgICAtLW91dHB1dCB0eXBlPWltYWdlLG5hbWU9IiRUQUciLHB1c2g9dHJ1ZSxyZWdpc3RyeS5pbnNlY3VyZT10cnVlIFwKICAgICAgICAgICAgLS1leHBvcnQtY2FjaGUgdHlwZT1yZWdpc3RyeSxyZWY9JElNQUdFX0JBU0U6Y2FjaGUscmVnaXN0cnkuaW5zZWN1cmU9dHJ1ZSBcCiAgICAgICAgICAgIC0taW1wb3J0LWNhY2hlIHR5cGU9cmVnaXN0cnkscmVmPSRJTUFHRV9CQVNFOGY2YWNoZSxyZWdpc3RyeS5pbnNlY3VyZT10cnVlCiAgICAgICAgZG9uZQogICAgICAgIAogICAgICAgIGVjaG8gIuKchSBCdWlsZCBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5ISIKICAgICAgICBlY2hvICLwn5GCIEltYWdlIHRhZ3M6ICRUQUdTIg=="
  }' \
  "https://git.xuperson.org/api/v1/repos/helloroot/claude-code-openai-wrapper/contents/.gitea/workflows/build.yml"

echo "âœ… Added Dockerfile and CI/CD workflow to your repo!"