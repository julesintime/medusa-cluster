apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: act-runner-vol
  namespace: gitea
  labels:
    app.kubernetes.io/name: gitea-runner
    app.kubernetes.io/part-of: gitea
    app.kubernetes.io/component: ci-cd
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: act-runner
    app.kubernetes.io/name: gitea-runner
    app.kubernetes.io/part-of: gitea
    app.kubernetes.io/component: ci-cd
  name: act-runner
  namespace: gitea
spec:
  replicas: 1
  selector:
    matchLabels:
      app: act-runner
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: act-runner
    spec:
      restartPolicy: Always
      serviceAccountName: gitea-runner-init
      initContainers:
      - name: cleanup-and-generate-token
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          # Install curl for API calls
          apt-get update && apt-get install -y curl
          
          set -e
          echo "üîÑ Setting up fresh runner registration..."
          
          # Step 1: Wait for admin API token to be available
          echo "üì¶ Waiting for admin API token..."
          while ! kubectl get secret gitea-admin-api-token -n gitea >/dev/null 2>&1; do
            echo "   Admin token not ready, waiting 10 seconds..."
            sleep 10
          done
          
          ADMIN_TOKEN=$(kubectl get secret gitea-admin-api-token -n gitea -o jsonpath='{.data.token}' | base64 -d)
          echo "‚úÖ Got admin API token (length: ${#ADMIN_TOKEN})"
          
          # Step 2: Wait for Gitea to be ready
          echo "üì° Waiting for Gitea to be accessible..."
          until curl -s -f -H "Authorization: token $ADMIN_TOKEN" "http://gitea-http:3000/api/v1/user" >/dev/null 2>&1; do
            echo "   Gitea API not ready, waiting 10 seconds..."
            sleep 10
          done
          echo "‚úÖ Gitea API is ready"
          
          # Step 3: Get fresh registration token via API
          echo "üé´ Getting fresh registration token via API..."
          GITEA_ADMIN_USER=$(kubectl get secret gitea-admin-secrets -n gitea -o jsonpath='{.data.username}' | base64 -d)
          GITEA_ADMIN_PASS=$(kubectl get secret gitea-admin-secrets -n gitea -o jsonpath='{.data.password}' | base64 -d)
          
          TOKEN_RESPONSE=$(curl -s -u "$GITEA_ADMIN_USER:$GITEA_ADMIN_PASS" "http://gitea-http:3000/api/v1/admin/runners/registration-token")
          REGISTRATION_TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"token":"[^"]*"' | sed 's/"token":"//;s/"//')
          
          if [ -z "$REGISTRATION_TOKEN" ] || [ ${#REGISTRATION_TOKEN} -lt 20 ]; then
            echo "‚ùå Failed to get registration token via API"
            echo "Response: $TOKEN_RESPONSE"
            
            # Fallback: Use CLI method
            echo "üîÑ Falling back to CLI method..."
            GITEA_POD=$(kubectl get pods -n gitea -l app=gitea -o jsonpath='{.items[0].metadata.name}')
            if [ -z "$GITEA_POD" ]; then
              echo "‚ùå No Gitea pod found"
              exit 1
            fi
            
            REGISTRATION_TOKEN=$(kubectl exec -n gitea $GITEA_POD -- gitea actions generate-runner-token 2>/dev/null | tr -d '\r\n' || echo "")
            if [ -z "$REGISTRATION_TOKEN" ]; then
              echo "‚ùå Failed to generate registration token via CLI"
              exit 1
            fi
          fi
          
          echo "‚úÖ Got registration token (length: ${#REGISTRATION_TOKEN})"
          
          # Step 4: Clean up any existing runner registration secret
          echo "üßπ Cleaning up old runner registration..."
          kubectl delete secret runner-secret -n gitea --ignore-not-found=true
          
          # Step 5: Create new runner registration secret
          kubectl create secret generic runner-secret \
            --from-literal=token="$REGISTRATION_TOKEN" \
            --namespace=gitea
          
          echo "üíæ Fresh runner registration token stored in 'runner-secret'"
          echo "üéØ Runner will register cleanly as the sole instance runner"
          
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      - name: install-buildctl
        image: moby/buildkit:master
        command: 
        - sh
        - -c
        - |
          cp /usr/bin/buildctl /shared/buildctl
          chmod +x /shared/buildctl
        volumeMounts:
        - name: buildctl-binary
          mountPath: /shared
      volumes:
      - name: runner-data
        persistentVolumeClaim:
          claimName: act-runner-vol
      - name: cache-dir
        emptyDir: {}
      - name: buildctl-binary
        emptyDir: {}
      - name: buildkit-certs
        secret:
          secretName: buildkit-daemon-certs
      - name: runner-home
        emptyDir: {}
      - name: runner-runtime
        emptyDir: {}
      - name: runner-tmp
        emptyDir: {}
      - name: runner-docker-config
        emptyDir: {}
      securityContext:
        fsGroup: 1000
      containers:
      - name: runner
        image: gitea/act_runner:nightly
        workingDir: /data
        command: 
        - sh
        - -c
        - |
          # Clean any existing config and re-register with fresh token
          echo "üîß Cleaning old runner config..."
          rm -f /data/.runner
          
          echo "üîê Registering as the sole runner for this instance..."
          act_runner register \
            --instance "$GITEA_INSTANCE_URL" \
            --token "$GITEA_RUNNER_REGISTRATION_TOKEN" \
            --name "$GITEA_RUNNER_NAME" \
            --labels "$GITEA_RUNNER_LABELS" \
            --no-interactive
          
          echo "üöÄ Starting runner daemon..."
          exec act_runner daemon
        env:
        - name: HOME
          value: "/home/runner"
        - name: USER
          value: "runner"
        - name: XDG_RUNTIME_DIR
          value: "/run/user/1000"
        - name: TMPDIR
          value: "/home/runner/.local/tmp"
        - name: DOCKER_CONFIG
          value: "/home/runner/.local/share/docker"
        - name: BUILDKIT_HOST
          value: tcp://buildkitd.buildkit.svc.cluster.local:1235
        - name: GITEA_INSTANCE_URL
          value: https://git.xuperson.org
        - name: GITEA_RUNNER_REGISTRATION_TOKEN
          valueFrom:
            secretKeyRef:
              name: runner-secret
              key: token
        - name: GITEA_RUNNER_NAME
          value: "sole-k8s-runner"
        - name: GITEA_RUNNER_LABELS
          value: "ubuntu-latest,ubuntu-22.04,buildkit"
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
        volumeMounts:
        - name: runner-data
          mountPath: /data
        - name: cache-dir
          mountPath: /.cache
        - name: buildctl-binary
          mountPath: /usr/local/bin/buildctl
          subPath: buildctl
        - name: buildkit-certs
          mountPath: /buildkit-certs
          readOnly: true
        - name: runner-home
          mountPath: /home/runner
        - name: runner-runtime
          mountPath: /run/user/1000
        - name: runner-tmp
          mountPath: /home/runner/.local/tmp
        - name: runner-docker-config
          mountPath: /home/runner/.local/share/docker
        resources:
          limits:
            cpu: 1500m
            memory: 2Gi
          requests:
            cpu: 250m
            memory: 512Mi
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "ps aux | grep -v grep | grep act_runner"
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "ps aux | grep -v grep | grep act_runner"
          initialDelaySeconds: 10
          periodSeconds: 10