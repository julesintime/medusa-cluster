apiVersion: v1
kind: ConfigMap
metadata:
  name: medusa-app-source
  namespace: medusa-backend
data:
  package.json: |
    {
      "name": "medusa-backend",
      "version": "1.0.0",
      "description": "Medusa.js backend for Kubernetes",
      "scripts": {
        "dev": "medusa develop",
        "start": "medusa start",
        "build": "medusa build",
        "seed": "medusa seed -f ./data/seed.json"
      },
      "dependencies": {
        "@medusajs/medusa": "2.9.0",
        "@medusajs/admin-bundler": "2.9.0",
        "@medusajs/cache-redis": "2.9.0",
        "@medusajs/event-bus-redis": "2.9.0",
        "@mikro-orm/core": "6.4.3",
        "@mikro-orm/postgresql": "6.4.3",
        "pg": "^8.13.0",
        "awilix": "^8.0.1"
      },
      "devDependencies": {
        "@medusajs/cli": "2.9.0",
        "@mikro-orm/cli": "6.4.3",
        "typescript": "^5.6.2"
      },
      "engines": {
        "node": ">=20"
      }
    }
  start.sh: |
    #!/bin/sh
    set -e

    echo "Starting Medusa application..."

    # Run database migrations if this is the server instance
    if [ "$MEDUSA_WORKER_MODE" = "server" ]; then
        echo "Running database migrations..."
        npx medusa db:migrate

        echo "Seeding database..."
        echo "Skipping seeding - no seed data configured"
    fi

    # Start the Medusa application based on mode
    if [ "$MEDUSA_WORKER_MODE" = "worker" ]; then
        echo "Starting Medusa worker..."
        exec npm start
    else
        echo "Starting Medusa server..."
        exec npm start
    fi
  medusa-config.js: |
    module.exports = {
      projectConfig: {
        databaseUrl: process.env.DATABASE_URL,
        redisUrl: process.env.REDIS_URL,
        workerMode: process.env.MEDUSA_WORKER_MODE || "shared",
        http: {
          storeCors: process.env.STORE_CORS || "http://localhost:8000",
          adminCors: process.env.ADMIN_CORS || "http://localhost:7001",
          authCors: process.env.AUTH_CORS || "http://localhost:9000",
          jwtSecret: process.env.JWT_SECRET || "supersecret",
          cookieSecret: process.env.COOKIE_SECRET || "supersecret",
        },
        databaseDriverOptions: {
          ssl: false
        }
      },
      admin: {
        disable: true,
      },
      modules: {
        cache: {
          resolve: "@medusajs/cache-redis",
          options: {
            redisUrl: process.env.REDIS_URL,
          },
        },
        eventBus: {
          resolve: "@medusajs/event-bus-redis",
          options: {
            redisUrl: process.env.REDIS_URL,
          },
        },
      },
    }
  tsconfig.json: |
    {
      "compilerOptions": {
        "target": "es2020",
        "lib": ["es2020"],
        "allowJs": true,
        "skipLibCheck": true,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        "forceConsistentCasingInFileNames": true,
        "module": "commonjs",
        "moduleResolution": "node",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "noEmit": true,
        "esModuleInterop": true,
        "experimentalDecorators": true,
        "emitDecoratorMetadata": true,
        "rootDir": "./",
        "baseUrl": ".",
        "paths": {
          "@/*": ["./*"]
        }
      },
      "include": [
        "**/*"
      ]
    }