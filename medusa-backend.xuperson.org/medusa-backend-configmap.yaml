apiVersion: v1
kind: ConfigMap
metadata:
  name: medusa-app-source
  namespace: medusa-backend
data:
  package.json: |
    {
      "name": "medusa-backend",
      "version": "1.0.0",
      "description": "Medusa.js backend for Kubernetes",
      "scripts": {
        "dev": "medusa develop",
        "start": "medusa start",
        "build": "medusa build",
        "seed": "medusa seed -f ./data/seed.json"
      },
      "dependencies": {
        "@medusajs/medusa": "^2.0.0",
        "@medusajs/admin-ui": "^3.0.0",
        "@medusajs/cache-redis": "^2.0.0",
        "@medusajs/event-bus-redis": "^2.0.0",
        "@medusajs/workflow-engine-redis": "^2.0.0",
        "pg": "^8.11.0",
        "redis": "^4.6.0"
      },
      "devDependencies": {
        "@medusajs/medusa-cli": "^2.0.0"
      },
      "engines": {
        "node": ">=20"
      }
    }
  start.sh: |
    #!/bin/sh
    set -e

    echo "Starting Medusa application..."

    # Run database migrations if this is the server instance
    if [ "$MEDUSA_WORKER_MODE" = "server" ]; then
        echo "Running database migrations..."
        npx medusa db:migrate

        echo "Seeding database..."
        npm run seed || echo "Seeding failed, continuing..."
    fi

    # Start the Medusa application based on mode
    if [ "$MEDUSA_WORKER_MODE" = "worker" ]; then
        echo "Starting Medusa worker..."
        exec npm start
    else
        echo "Starting Medusa server..."
        exec npm start
    fi
  medusa-config.ts: |
    import { defineConfig } from "@medusajs/medusa/utils"

    export default defineConfig({
      projectConfig: {
        databaseUrl: process.env.DATABASE_URL,
        redisUrl: process.env.REDIS_URL,
        workerMode: process.env.MEDUSA_WORKER_MODE as "shared" | "worker" | "server" || "shared",
        http: {
          storeCors: process.env.STORE_CORS || "http://localhost:8000",
          adminCors: process.env.ADMIN_CORS || "http://localhost:7001",
          authCors: process.env.AUTH_CORS || "http://localhost:9000",
          jwtSecret: process.env.JWT_SECRET || "supersecret",
          cookieSecret: process.env.COOKIE_SECRET || "supersecret",
        },
        databaseDriverOptions: {
          ssl: false
        }
      },
      admin: {
        disable: process.env.DISABLE_MEDUSA_ADMIN === "true" || false,
      },
      modules: {
        cache: {
          resolve: "@medusajs/cache-redis",
          options: {
            redisUrl: process.env.REDIS_URL,
          },
        },
        eventBus: {
          resolve: "@medusajs/event-bus-redis",
          options: {
            redisUrl: process.env.REDIS_URL,
          },
        },
        workflowEngine: {
          resolve: "@medusajs/workflow-engine-redis",
          options: {
            redis: {
              url: process.env.REDIS_URL,
            },
          },
        },
      },
    })