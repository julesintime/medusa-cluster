apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: medusa-backend-full-automation
  namespace: medusa-backend
spec:
  entrypoint: medusa-full-pipeline
  serviceAccountName: medusa-backend-workflow

  arguments:
    parameters:
    - name: repo-url
      value: "https://github.com/julesintime/medusa-cluster.git"
    - name: revision
      value: "main"
    - name: medusa-path
      value: "medusa-backend.xuperson.org"

  volumes:
  - name: medusa-workspace
    persistentVolumeClaim:
      claimName: medusa-workspace-pvc

  templates:
  - name: medusa-full-pipeline
    dag:
      tasks:
      - name: build-medusa-app
        template: build-app
      - name: setup-admin-user
        template: setup-admin
        dependencies: [build-medusa-app]
      - name: create-api-keys
        template: create-keys
        dependencies: [setup-admin-user]
      - name: deploy-medusa-server
        template: deploy-server
        dependencies: [create-api-keys]
      - name: deploy-medusa-worker
        template: deploy-worker
        dependencies: [create-api-keys]

  - name: build-app
    inputs:
      artifacts:
      - name: source
        path: /src
        git:
          repo: "{{workflow.parameters.repo-url}}"
          revision: "{{workflow.parameters.revision}}"
    container:
      image: node:20-alpine
      command: [sh, -c]
      args:
      - |
        set -ex
        echo "=== STEP 1: Setup Build Environment ==="
        apk add --no-cache git python3 make g++ curl

        cd /src/{{workflow.parameters.medusa-path}}

        echo "=== STEP 2: Install Dependencies ==="
        npm install

        echo "=== STEP 3: Build Medusa Backend and Admin UI ==="
        npm run build

        echo "=== STEP 4: Create Production Bundle ==="
        mkdir -p /workspace/medusa-app
        cp -r . /workspace/medusa-app/
        cd /workspace/medusa-app

        # Verify admin UI exists at ANY valid location
        echo "=== Checking admin UI locations ==="
        if [ -f /workspace/medusa-app/dist/public/admin/index.html ]; then
          echo "✅ Admin UI found at: dist/public/admin/"
          # Create in expected server location
          mkdir -p .medusa/server/public
          cp -r dist/public/admin .medusa/server/public/
        elif [ -f /workspace/medusa-app/.medusa/admin/index.html ]; then
          echo "✅ Admin UI found at: .medusa/admin/"
          # Create in expected server location
          mkdir -p .medusa/server/public
          cp -r .medusa/admin .medusa/server/public/
        fi

        chmod +x /workspace/medusa-app/start.sh
        echo "Build completed at $(date)" > /workspace/medusa-app/.ready
        echo "=== BUILD COMPLETE ==="
      volumeMounts:
      - name: medusa-workspace
        mountPath: /workspace
      resources:
        requests:
          cpu: "2"
          memory: "4Gi"
        limits:
          cpu: "4"
          memory: "8Gi"

  - name: setup-admin
    container:
      image: node:20-alpine
      workingDir: /workspace/medusa-app
      command: ["sh", "-c"]
      args:
      - |
        set -ex
        echo "=== STEP 1: Install openssl ==="
        apk add --no-cache openssl

        echo "=== STEP 2: Setup Admin User ==="

        # Wait for database to be ready
        echo "Waiting for database..."
        until npx medusa db:migrate; do
          echo "Database not ready, waiting..."
          sleep 10
        done

        echo "=== STEP 3: Create Admin User ==="
        # Create admin user with known credentials
        ADMIN_EMAIL="admin@medusa-backend.xuperson.org"
        ADMIN_PASSWORD=$(openssl rand -base64 32)

        echo "Creating admin user: $ADMIN_EMAIL"
        npx medusa user --email "$ADMIN_EMAIL" --password "$ADMIN_PASSWORD" || echo "User might already exist"

        # Store admin credentials in file for next step
        echo "$ADMIN_EMAIL" > /workspace/admin-email.txt
        echo "$ADMIN_PASSWORD" > /workspace/admin-password.txt

        echo "=== Admin setup complete ==="
      env:
      - name: NODE_ENV
        value: production
      - name: DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: medusa-backend-secrets
            key: database-url
      - name: REDIS_URL
        valueFrom:
          secretKeyRef:
            name: medusa-backend-secrets
            key: redis-url
      - name: COOKIE_SECRET
        valueFrom:
          secretKeyRef:
            name: medusa-backend-secrets
            key: cookie-secret
      - name: JWT_SECRET
        valueFrom:
          secretKeyRef:
            name: medusa-backend-secrets
            key: jwt-secret
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: "1"
          memory: 2Gi
      volumeMounts:
      - name: medusa-workspace
        mountPath: /workspace

  - name: create-keys
    container:
      image: node:20-alpine
      command: ["sh", "-c"]
      args:
      - |
        set -ex
        echo "=== STEP 1: Install required tools ==="
        apk add --no-cache curl openssl

        echo "=== STEP 2: Configure Admin UI Path ==="
        cd /workspace/medusa-app

        # Ensure admin UI is in the correct location for server runtime
        if [ -f .medusa/server/public/admin/index.html ]; then
          echo "✅ Admin UI already in server location"
        elif [ -f dist/public/admin/index.html ]; then
          echo "📁 Copying admin UI from dist to server location"
          mkdir -p .medusa/server/public
          cp -r dist/public/admin .medusa/server/public/
        elif [ -f .medusa/admin/index.html ]; then
          echo "📁 Copying admin UI from .medusa/admin to server location"
          mkdir -p .medusa/server/public
          cp -r .medusa/admin .medusa/server/public/admin
        fi

        echo "=== STEP 3: Start Medusa Server for API calls ==="

        # Set admin build path explicitly
        export MEDUSA_ADMIN_BUILD_PATH=/workspace/medusa-app/.medusa/server/public/admin

        # Start Medusa server in background for API access
        nohup node_modules/.bin/medusa start &
        SERVER_PID=$!

        # Wait for server to be ready
        echo "Waiting for Medusa server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:9000/health > /dev/null 2>&1; then
            echo "Server is ready!"
            break
          fi
          echo "Waiting... attempt $i/30"
          sleep 10
        done

        # Check if server actually started
        if ! curl -s http://localhost:9000/health > /dev/null 2>&1; then
          echo "❌ Server failed to start, checking logs..."
          ps aux | grep medusa || echo "No medusa processes"
          echo "Admin UI files:"
          find . -name "index.html" -path "*admin*" 2>/dev/null || echo "No admin index.html found"
          exit 1
        fi

        echo "=== STEP 4: Admin Login ==="
        ADMIN_EMAIL=$(cat /workspace/admin-email.txt)
        ADMIN_PASSWORD=$(cat /workspace/admin-password.txt)

        # Login to get admin bearer token
        LOGIN_RESPONSE=$(curl -s -X POST http://localhost:9000/admin/auth/session \
          -H "Content-Type: application/json" \
          -d "{\"email\":\"$ADMIN_EMAIL\", \"password\":\"$ADMIN_PASSWORD\"}")

        echo "Login response: $LOGIN_RESPONSE"
        ADMIN_TOKEN=$(echo "$LOGIN_RESPONSE" | sed -n 's/.*"token":"\([^"]*\)".*/\1/p')

        if [ -z "$ADMIN_TOKEN" ]; then
          echo "Failed to get admin token"
          exit 1
        fi

        echo "=== STEP 5: Create Publishable API Key ==="
        KEY_RESPONSE=$(curl -s -X POST http://localhost:9000/admin/api-keys \
          -H "Authorization: Bearer $ADMIN_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"title": "Auto-generated Publishable Key", "type": "publishable"}')

        echo "Key creation response: $KEY_RESPONSE"
        PUBLISHABLE_KEY=$(echo "$KEY_RESPONSE" | sed -n 's/.*"token":"\([^"]*\)".*/\1/p')

        if [ -z "$PUBLISHABLE_KEY" ]; then
          echo "Failed to create publishable API key"
          exit 1
        fi

        echo "=== STEP 6: Store Keys in Kubernetes Secret ==="
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        mv kubectl /usr/local/bin/

        # Create secret with API keys
        kubectl create secret generic medusa-api-keys \
          --from-literal=admin-email="$ADMIN_EMAIL" \
          --from-literal=admin-password="$ADMIN_PASSWORD" \
          --from-literal=admin-token="$ADMIN_TOKEN" \
          --from-literal=publishable-key="$PUBLISHABLE_KEY" \
          --namespace=medusa-backend \
          --dry-run=client -o yaml | kubectl apply -f -

        echo "=== API Keys Generated Successfully ==="
        echo "Admin Token: $ADMIN_TOKEN"
        echo "Publishable Key: $PUBLISHABLE_KEY"

        # Stop the background server
        kill $SERVER_PID || true
      env:
      - name: NODE_ENV
        value: production
      - name: DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: medusa-backend-secrets
            key: database-url
      - name: REDIS_URL
        valueFrom:
          secretKeyRef:
            name: medusa-backend-secrets
            key: redis-url
      - name: COOKIE_SECRET
        valueFrom:
          secretKeyRef:
            name: medusa-backend-secrets
            key: cookie-secret
      - name: JWT_SECRET
        valueFrom:
          secretKeyRef:
            name: medusa-backend-secrets
            key: jwt-secret
      resources:
        requests:
          cpu: "1"
          memory: 2Gi
        limits:
          cpu: "2"
          memory: 4Gi
      volumeMounts:
      - name: medusa-workspace
        mountPath: /workspace

  - name: deploy-server
    resource:
      action: apply
      manifest: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: medusa-backend-server
          namespace: medusa-backend
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/name: medusa-backend
              app.kubernetes.io/component: server
          template:
            metadata:
              labels:
                app.kubernetes.io/name: medusa-backend
                app.kubernetes.io/component: server
            spec:
              serviceAccountName: medusa-backend
              initContainers:
              - name: wait-for-postgres
                image: postgres:15-alpine
                command: [sh, -c]
                args: ["until pg_isready -h medusa-postgres -p 5432 -U postgres; do echo 'Waiting for PostgreSQL...'; sleep 2; done"]
              - name: wait-for-redis
                image: redis:7-alpine
                command: [sh, -c]
                args: ["until redis-cli -h medusa-redis -p 6379 ping; do echo 'Waiting for Redis...'; sleep 2; done"]
              containers:
              - name: medusa-server
                image: node:20-alpine
                workingDir: /app/medusa-app
                command: ["/app/medusa-app/start.sh"]
                ports:
                - containerPort: 9000
                  name: http
                env:
                - name: NODE_ENV
                  value: "production"
                - name: MEDUSA_WORKER_MODE
                  value: "server"
                - name: PORT
                  value: "9000"
                - name: MEDUSA_BACKEND_URL
                  value: "https://medusa-backend.xuperson.org"
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: medusa-backend-secrets
                      key: database-url
                - name: REDIS_URL
                  valueFrom:
                    secretKeyRef:
                      name: medusa-backend-secrets
                      key: redis-url
                - name: COOKIE_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: medusa-backend-secrets
                      key: cookie-secret
                - name: JWT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: medusa-backend-secrets
                      key: jwt-secret
                - name: MEDUSA_ADMIN_EMAIL
                  valueFrom:
                    secretKeyRef:
                      name: medusa-api-keys
                      key: admin-email
                - name: MEDUSA_PUBLISHABLE_KEY
                  valueFrom:
                    secretKeyRef:
                      name: medusa-api-keys
                      key: publishable-key
                volumeMounts:
                - name: medusa-workspace
                  mountPath: /app
                  readOnly: true
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 9000
                  initialDelaySeconds: 60
                  timeoutSeconds: 10
                  periodSeconds: 30
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 9000
                  initialDelaySeconds: 30
                  timeoutSeconds: 5
                  periodSeconds: 10
                resources:
                  requests:
                    memory: "512Mi"
                    cpu: "250m"
                  limits:
                    memory: "1Gi"
                    cpu: "1"
              volumes:
              - name: medusa-workspace
                persistentVolumeClaim:
                  claimName: medusa-workspace-pvc
                  readOnly: true

  - name: deploy-worker
    resource:
      action: apply
      manifest: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: medusa-backend-worker
          namespace: medusa-backend
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/name: medusa-backend
              app.kubernetes.io/component: worker
          template:
            metadata:
              labels:
                app.kubernetes.io/name: medusa-backend
                app.kubernetes.io/component: worker
            spec:
              serviceAccountName: medusa-backend
              containers:
              - name: medusa-worker
                image: node:20-alpine
                workingDir: /app/medusa-app
                command: ["/app/medusa-app/start.sh"]
                env:
                - name: NODE_ENV
                  value: "production"
                - name: MEDUSA_WORKER_MODE
                  value: "worker"
                - name: MEDUSA_BACKEND_URL
                  value: "https://medusa-backend.xuperson.org"
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: medusa-backend-secrets
                      key: database-url
                - name: REDIS_URL
                  valueFrom:
                    secretKeyRef:
                      name: medusa-backend-secrets
                      key: redis-url
                - name: COOKIE_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: medusa-backend-secrets
                      key: cookie-secret
                - name: JWT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: medusa-backend-secrets
                      key: jwt-secret
                volumeMounts:
                - name: medusa-workspace
                  mountPath: /app
                  readOnly: true
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "100m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
              volumes:
              - name: medusa-workspace
                persistentVolumeClaim:
                  claimName: medusa-workspace-pvc
                  readOnly: true